{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\StatsAppNative\\\\MyApp\\\\screens\\\\ViewGame\\\\ViewGame.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useEffect, useState, Component } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nimport { ThemeColors } from 'react-navigation';\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { Picker } from '@react-native-community/picker';\nvar screenWidth = Dimensions.get('window').width;\nvar screenHeight = Dimensions.get('window').height;\nvar win = Dimensions.get('window');\nvar ratioGaaView = win.width / 590;\nvar ratioSoccerView = win.width / 700;\n\nvar ViewGame = function (_Component) {\n  _inherits(ViewGame, _Component);\n\n  var _super = _createSuper(ViewGame);\n\n  function ViewGame(props) {\n    var _this;\n\n    _classCallCheck(this, ViewGame);\n\n    _this = _super.call(this, props);\n\n    _this.filterGameData = function _callee() {\n      var totalTeamGoals, myUserId, _this$props$navigatio, state, setParams, navigate, params, tempArr, tempArrOpponents, query;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              totalTeamGoals = _this.state.totalTeamGoals;\n              myUserId = firebase.auth().currentUser.uid;\n              _this$props$navigatio = _this.props.navigation, state = _this$props$navigatio.state, setParams = _this$props$navigatio.setParams, navigate = _this$props$navigatio.navigate;\n              params = state.params || {};\n              tempArr = [];\n              tempArrOpponents = [];\n              query = firebase.database().ref('/teams').child(myUserId).child('games').child(params.GameRecordKey).child('YourTeamStats').child(params.StatsRecordKey).on('value', function (snapshot) {\n                var gameObj = snapshot.val();\n                var screenWidth = gameObj.screenWidth;\n\n                _this.setState({\n                  StatsStoredUsingScreenWidth: screenWidth\n                });\n\n                var screenHeight = gameObj.screenHeight;\n\n                _this.setState({\n                  StatsStoredUsingScreenHeight: screenHeight\n                });\n\n                var totalTeamGoals = gameObj.totalTeamGoals;\n\n                _this.setState({\n                  totalTeamGoals: totalTeamGoals\n                });\n\n                var totalTeamShots = gameObj.totalTeamShots;\n\n                _this.setState({\n                  totalTeamShots: totalTeamShots\n                });\n\n                var totalTeamShotsOnTarget = gameObj.totalTeamShotsOnTarget;\n\n                _this.setState({\n                  totalTeamShotsOnTarget: totalTeamShotsOnTarget\n                });\n\n                var totalOpponentsTeamGoals = gameObj.totalOpponentsTeamGoals;\n\n                _this.setState({\n                  totalOpponentsTeamGoals: totalOpponentsTeamGoals\n                });\n\n                var totalOpponentsTeamShots = gameObj.totalOpponentsTeamShots;\n\n                _this.setState({\n                  totalOpponentsTeamShots: totalOpponentsTeamShots\n                });\n\n                var totalOpponentsTeamShotsOnTarget = gameObj.totalOpponentsTeamShotsOnTarget;\n\n                _this.setState({\n                  totalOpponentsTeamShotsOnTarget: totalOpponentsTeamShotsOnTarget\n                });\n              });\n              firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('EventFieldPositions').on('value', function (snapshot) {\n                tempArr = _this.snapshotToArray(snapshot);\n\n                _this.setState({\n                  EventFieldLocations: tempArr\n                });\n              });\n              firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('OpponentsEventFieldPositions').on('value', function (snapshot) {\n                tempArrOpponents = _this.snapshotToArray(snapshot);\n\n                _this.setState({\n                  OpponentsEventFieldLocations: tempArrOpponents\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.GetSelectedYourTeamPlayerStats = function (value) {\n      return function () {\n        var _this$props$navigatio2 = _this.props.navigation,\n            state = _this$props$navigatio2.state,\n            setParams = _this$props$navigatio2.setParams,\n            navigate = _this$props$navigatio2.navigate;\n        var params = state.params || {};\n        var myUserId = firebase.auth().currentUser.uid;\n        var tempArrYourTeam = [];\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.key).child('YourTeam').child('players').on('value', function (snapshot) {\n          tempArrYourTeam = _this.snapshotToArray(snapshot);\n\n          _this.setState({\n            YourTeamPlayerData: tempArrYourTeam\n          });\n        });\n        console.log(_this.state.OpponentsPlayerData);\n      };\n    };\n\n    _this.GetSelectedOpponentsPlayerStats = function (value) {\n      return function () {\n        var _this$props$navigatio3 = _this.props.navigation,\n            state = _this$props$navigatio3.state,\n            setParams = _this$props$navigatio3.setParams,\n            navigate = _this$props$navigatio3.navigate;\n        var params = state.params || {};\n        var myUserId = firebase.auth().currentUser.uid;\n        var tempArrOpponents = [];\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.key).child('Opponents').child('players').on('value', function (snapshot) {\n          tempArrOpponents = _this.snapshotToArray(snapshot);\n\n          _this.setState({\n            OpponentsPlayerData: tempArrOpponents\n          });\n        });\n        console.log(_this.state.OpponentsPlayerData);\n      };\n    };\n\n    _this.ReviewPlayerStats = function (itemKey) {\n      var selectedTeamPlayer = _this.state.selectedTeamPlayer;\n      var YourTeamEventSelection = _this.state.YourTeamEventSelection;\n      var myUserId = firebase.auth().currentUser.uid;\n      var _this$props$navigatio4 = _this.props.navigation,\n          state = _this$props$navigatio4.state,\n          setParams = _this$props$navigatio4.setParams,\n          navigate = _this$props$navigatio4.navigate;\n      var params = state.params || {};\n      var tempArr = _this.state.tempArr;\n\n      if (selectedTeamPlayer == '') {\n        return alert(\"Please select a player\");\n      } else {\n        _this.setState({\n          displayReviewGameStats: false\n        });\n\n        _this.setState({\n          displaySelectedPlayerStats: true\n        });\n\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('YourTeam').child('players').orderByChild(\"PlayerID\").equalTo(selectedTeamPlayer).on('value', function (snapshot) {\n          var playerObj = snapshot.val();\n          tempArr = _this.snapshotToArray(snapshot);\n\n          for (var i = 0; i < tempArr.length; i++) {\n            var Goals = tempArr[i].Goals;\n\n            _this.setState({\n              Goals: Goals\n            });\n\n            var Points = tempArr[i].Points;\n\n            _this.setState({\n              Points: Points\n            });\n\n            var Passes = tempArr[i].Passes;\n\n            _this.setState({\n              Passes: Passes\n            });\n\n            var PlayerKitNumber = tempArr[i].PlayerKitNumber;\n\n            _this.setState({\n              PlayerKitNumber: PlayerKitNumber\n            });\n\n            var PlayerName = tempArr[i].PlayerName;\n\n            _this.setState({\n              PlayerName: PlayerName\n            });\n\n            var PlayerPosition = tempArr[i].PlayerPosition;\n\n            _this.setState({\n              PlayerPosition: PlayerPosition\n            });\n\n            var Shots = tempArr[i].Shots;\n\n            _this.setState({\n              Shots: Shots\n            });\n\n            var ShotsOnTarget = tempArr[i].ShotsOnTarget;\n\n            _this.setState({\n              ShotsOnTarget: ShotsOnTarget\n            });\n          }\n        });\n      }\n    };\n\n    _this.ReviewOpponentsPlayerStats = function (itemKey) {\n      var myUserId = firebase.auth().currentUser.uid;\n      var _this$props$navigatio5 = _this.props.navigation,\n          state = _this$props$navigatio5.state,\n          setParams = _this$props$navigatio5.setParams,\n          navigate = _this$props$navigatio5.navigate;\n      var params = state.params || {};\n      var tempArr = _this.state.tempArr;\n      var selectedOpponentsPlayer = _this.state.selectedOpponentsPlayer;\n\n      if (selectedOpponentsPlayer == '') {\n        return alert(\"Please select a player\");\n      } else {\n        _this.setState({\n          displayReviewGameStats: false\n        });\n\n        _this.setState({\n          displayOpponentsSelectedPlayerStats: true\n        });\n\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('Opponents').child('players').orderByChild(\"PlayerID\").equalTo(selectedOpponentsPlayer).on('value', function (snapshot) {\n          var playerObj = snapshot.val();\n          tempArr = _this.snapshotToArray(snapshot);\n\n          for (var i = 0; i < tempArr.length; i++) {\n            var Goals = tempArr[i].Goals;\n\n            _this.setState({\n              Goals: Goals\n            });\n\n            var Points = tempArr[i].Points;\n\n            _this.setState({\n              Points: Points\n            });\n\n            var Passes = tempArr[i].Passes;\n\n            _this.setState({\n              Passes: Passes\n            });\n\n            var PlayerKitNumber = tempArr[i].PlayerKitNumber;\n\n            _this.setState({\n              PlayerKitNumber: PlayerKitNumber\n            });\n\n            var PlayerName = tempArr[i].PlayerName;\n\n            _this.setState({\n              PlayerName: PlayerName\n            });\n\n            var PlayerPosition = tempArr[i].PlayerPosition;\n\n            _this.setState({\n              PlayerPosition: PlayerPosition\n            });\n\n            var Shots = tempArr[i].Shots;\n\n            _this.setState({\n              Shots: Shots\n            });\n\n            var ShotsOnTarget = tempArr[i].ShotsOnTarget;\n\n            _this.setState({\n              ShotsOnTarget: ShotsOnTarget\n            });\n          }\n        });\n      }\n    };\n\n    _this.GetSpecificPlayerEventLocations = function _callee2() {\n      var EventFieldLocations, YourTeamEventSelection, selectedTeamPlayer, myUserId, tempEventFieldLocations, _this$props$navigatio6, state, setParams, navigate, params, i, data;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              EventFieldLocations = _this.state.EventFieldLocations;\n              YourTeamEventSelection = _this.state.YourTeamEventSelection;\n              selectedTeamPlayer = _this.state.selectedTeamPlayer;\n              myUserId = firebase.auth().currentUser.uid;\n              tempEventFieldLocations = _this.state.tempEventFieldLocations;\n\n              if (!(selectedTeamPlayer != '')) {\n                _context2.next = 16;\n                break;\n              }\n\n              if (!(YourTeamEventSelection == '')) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", alert(\"Please select an event\"));\n\n            case 10:\n              _this$props$navigatio6 = _this.props.navigation, state = _this$props$navigatio6.state, setParams = _this$props$navigatio6.setParams, navigate = _this$props$navigatio6.navigate;\n              params = state.params || {};\n              tempEventFieldLocations.splice(0, tempEventFieldLocations.length);\n\n              for (i = 0; i < EventFieldLocations.length; i++) {\n                if (EventFieldLocations[i].EventType == YourTeamEventSelection && EventFieldLocations[i].UserID == PlayerIDSelected) {\n                  data = {\n                    x: EventFieldLocations[i].x,\n                    y: EventFieldLocations[i].y\n                  };\n\n                  _this.state.tempEventFieldLocations.push(data);\n                }\n              }\n\n            case 14:\n              _context2.next = 17;\n              break;\n\n            case 16:\n              return _context2.abrupt(\"return\", alert(\"Please select a player\"));\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.ReviewGameStats = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.setState({\n                displayReviewSelection: false\n              });\n\n              _this.setState({\n                displayReviewGameStats: true\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.TeamSpecificStat = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.setState({\n                SelectAnEvent_ReviewGameStats_YourTeam: true\n              });\n\n              _this.setState({\n                displayReviewSelection: false\n              });\n\n              _this.setState({\n                displayReviewGameStats: false\n              });\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.OpponentsSpecificStat = function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.setState({\n                SelectAnEvent_ReviewGameStats_Opponents: true\n              });\n\n              _this.setState({\n                displayReviewGameStats: false\n              });\n\n              _this.setState({\n                displayReviewSelection: false\n              });\n\n            case 3:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.ExecuteYourTeamEventAnaylsis = function _callee6() {\n      var YourTeamEventSelection, EventFieldLocations, myUserId, tempEventFieldLocations, _this$props$navigatio7, state, setParams, navigate, params, i, data;\n\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              YourTeamEventSelection = _this.state.YourTeamEventSelection;\n              EventFieldLocations = _this.state.EventFieldLocations;\n              myUserId = firebase.auth().currentUser.uid;\n              tempEventFieldLocations = _this.state.tempEventFieldLocations;\n              _this$props$navigatio7 = _this.props.navigation, state = _this$props$navigatio7.state, setParams = _this$props$navigatio7.setParams, navigate = _this$props$navigatio7.navigate;\n              params = state.params || {};\n              tempEventFieldLocations.splice(0, tempEventFieldLocations.length);\n\n              for (i = 0; i < EventFieldLocations.length; i++) {\n                if (EventFieldLocations[i].EventType == YourTeamEventSelection) {\n                  data = {\n                    x: EventFieldLocations[i].x,\n                    y: EventFieldLocations[i].y\n                  };\n\n                  _this.state.tempEventFieldLocations.push(data);\n                }\n              }\n\n              _this.setState({\n                SelectAnEvent_ReviewGameStats_YourTeam: false\n              });\n\n              _this.setState({\n                YourTeamSpecificStatFieldEvents: true\n              });\n\n            case 10:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.ExecuteOpponentsPlayerEventAnaylsis = function _callee7() {\n      var OpponentEventSelection, OpponentsEventFieldLocations, myUserId, tempEventFieldLocations, SportType, _this$props$navigatio8, state, setParams, navigate, params, i, data;\n\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              OpponentEventSelection = _this.state.OpponentEventSelection;\n              OpponentsEventFieldLocations = _this.state.OpponentsEventFieldLocations;\n              myUserId = firebase.auth().currentUser.uid;\n              tempEventFieldLocations = _this.state.tempEventFieldLocations;\n              SportType = _this.state.SportType;\n              _this$props$navigatio8 = _this.props.navigation, state = _this$props$navigatio8.state, setParams = _this$props$navigatio8.setParams, navigate = _this$props$navigatio8.navigate;\n              params = state.params || {};\n              tempEventFieldLocations.splice(0, tempEventFieldLocations.length);\n\n              for (i = 0; i < OpponentsEventFieldLocations.length; i++) {\n                if (OpponentsEventFieldLocations[i].EventType == OpponentEventSelection) {\n                  data = {\n                    x: OpponentsEventFieldLocations[i].x,\n                    y: OpponentsEventFieldLocations[i].y\n                  };\n\n                  _this.state.tempEventFieldLocations.push(data);\n                }\n              }\n\n              _this.setState({\n                SelectAnEvent_ReviewGameStats_Opponents: false\n              });\n\n              _this.setState({\n                OpponentsSpecificStatFieldEvents: true\n              });\n\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.snapshotToArray = function (snapshot) {\n      var retArr = [];\n      snapshot.forEach(function (childSnapshot) {\n        var item = childSnapshot.val();\n        item.key = childSnapshot.key;\n        retArr.push(item);\n      });\n      return retArr;\n    };\n\n    _this.YourTeamSelected = function _callee8() {\n      var _this$props$navigatio9, state, setParams, navigate, params, myUserId, tempArr;\n\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _this.setState({\n                displayReviewOpponentsPlayer: false\n              });\n\n              _this.setState({\n                displayReviewSelection: false\n              });\n\n              _this.setState({\n                displayReviewYourTeamPlayer: true\n              });\n\n              _this.setState({\n                displayTeamOption: false\n              });\n\n              _this$props$navigatio9 = _this.props.navigation, state = _this$props$navigatio9.state, setParams = _this$props$navigatio9.setParams, navigate = _this$props$navigatio9.navigate;\n              params = state.params || {};\n              myUserId = firebase.auth().currentUser.uid;\n              tempArr = [];\n              firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('YourTeam').child('players').on('value', function (snapshot) {\n                console.log(snapshot.val());\n                tempArr = _this.snapshotToArray(snapshot);\n\n                _this.setState({\n                  PlayerData: tempArr\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.OpponentsSelected = function _callee9() {\n      var _this$props$navigatio10, state, setParams, navigate, params, myUserId, tempArr;\n\n      return _regeneratorRuntime.async(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _this.setState({\n                displayReviewSelection: false\n              });\n\n              _this.setState({\n                displayReviewOpponentsPlayer: true\n              });\n\n              _this.setState({\n                displayTeamOption: false\n              });\n\n              _this$props$navigatio10 = _this.props.navigation, state = _this$props$navigatio10.state, setParams = _this$props$navigatio10.setParams, navigate = _this$props$navigatio10.navigate;\n              params = state.params || {};\n              myUserId = firebase.auth().currentUser.uid;\n              tempArr = [];\n              firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('Opponents').child('players').on('value', function (snapshot) {\n                console.log(snapshot.val());\n                tempArr = _this.snapshotToArray(snapshot);\n\n                _this.setState({\n                  OpponentsPlayerData: tempArr\n                });\n              });\n\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.SelectPlayerSelection = function _callee10() {\n      return _regeneratorRuntime.async(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _this.setState({\n                displayReviewGameStats: false\n              });\n\n              _this.setState({\n                displayReviewSelection: false\n              });\n\n              _this.setState({\n                SelectAnEvent_ReviewGameStats_YourTeamPlayer: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      TeamName: '',\n      SportType: '',\n      inviteCode: '',\n      hasATeam: false,\n      userType: [],\n      GameList: [],\n      GameViewList: [],\n      UsersScreenHeight: 0,\n      UsersScreenWidth: 0,\n      statRecord: '',\n      gameStatsRecordsArray: [],\n      selectedTeamPlayer: '',\n      selectedOpponentsPlayer: '',\n      PlayerData: [],\n      OpponentsPlayerData: [],\n      YourTeamPlayerData: [],\n      tempArr: [],\n      tempArrOpponents: [],\n      tempArrYourTeam: [],\n      totalTeamGoals: 0,\n      totalTeamPoints: 0,\n      totalTeamPasses: 0,\n      totalTeamShots: 0,\n      totalTeamShotsOnTarget: 0,\n      totalOpponentsTeamGoals: 0,\n      totalOpponentsTeamPoints: 0,\n      totalOpponentsTeamShots: 0,\n      totalOpponentsTeamShotsOnTarget: 0,\n      totalOpponentsTeamPasses: 0,\n      GameRecordKey: '',\n      StatsRecordKey: '',\n      tempEventFieldLocations: [],\n      YourTeamFieldEventsView: false,\n      OpponentsFieldEventsView: false,\n      YourTeamEventSelection: '',\n      OpponentsEventSelection: '',\n      EventFieldLocations: [],\n      OpponentsEventFieldLocations: [],\n      displayTeamSpecificEventSelection: false,\n      displayOpponentsSpecificEventSelection: false,\n      YourTeamSpecificStatFieldEvents: false,\n      OpponentsSpecificStatFieldEventsSoccerView: false,\n      displayReviewSelection: true,\n      displayReviewGameStats: false,\n      displayReviewYourTeamPlayer: false,\n      displayReviewOpponentsPlayer: false,\n      displaySelectedPlayerStats: false,\n      PlayerKitNumber: 0,\n      PlayerName: '',\n      PlayerPosition: '',\n      Goals: 0,\n      Points: 0,\n      Passes: 0,\n      Shots: 0,\n      ShotsOnTarget: 0\n    };\n    return _this;\n  }\n\n  _createClass(ViewGame, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _this$props$navigatio11 = this.props.navigation,\n          state = _this$props$navigatio11.state,\n          setParams = _this$props$navigatio11.setParams,\n          navigate = _this$props$navigatio11.navigate;\n      var params = state.params || {};\n      this.setState({\n        GameRecordKey: params.GameRecordKey\n      });\n      this.setState({\n        StatsRecordKey: params.StatsRecordKey\n      });\n      var myUserId = firebase.auth().currentUser.uid;\n      var GameRecordKey = this.state.GameRecordKey;\n      var gameStatsRecordsArray = this.state.gameStatsRecordsArray;\n      firebase.database().ref('/teams').child(myUserId).on('value', function (snapshot) {\n        var userObj = snapshot.val();\n        var SportType = userObj.SportType;\n\n        _this2.setState({\n          SportType: SportType\n        });\n\n        var TeamName = userObj.TeamName;\n\n        _this2.setState({\n          TeamName: TeamName\n        });\n      });\n      this.filterGameData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var ReviewGameStats;\n      var ReviewPlayerStats;\n      var ReviewSelection;\n      var TeamOption;\n      var PlayerStats;\n      var FieldWithPlots;\n      var SportType = this.state.SportType;\n      var displayReviewSelection = this.state.displayReviewSelection;\n      var displayReviewGameStats = this.state.displayReviewGameStats;\n      var SelectAnEvent_ReviewGameStats_YourTeam = this.state.SelectAnEvent_ReviewGameStats_YourTeam;\n      var SelectAnEvent_ReviewGameStats_Opponents = this.state.SelectAnEvent_ReviewGameStats_Opponents;\n      var SelectAnEvent_ReviewGameStats_YourTeamPlayer = this.state.SelectAnEvent_ReviewGameStats_YourTeamPlayer;\n      var SelectAnEvent_ReviewGameStats_Opponents_TeamPlayer = this.state.SelectAnEvent_ReviewGameStats_Opponents_TeamPlayer;\n      var YourTeamSpecificStatFieldEvents = this.state.YourTeamSpecificStatFieldEvents;\n      var OpponentsSpecificStatFieldEvents = this.state.OpponentsSpecificStatFieldEvents;\n\n      if (displayReviewSelection == true) {\n        ReviewSelection = React.createElement(ScrollView, {\n          style: stylesViewGame.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1149,\n            columnNumber: 29\n          }\n        }, React.createElement(TouchableOpacity, {\n          style: stylesViewGame.button,\n          onPress: this.ReviewGameStats,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1151,\n            columnNumber: 33\n          }\n        }, React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1152,\n            columnNumber: 37\n          }\n        }, \"Review Games Stats\")), React.createElement(TouchableOpacity, {\n          style: stylesViewGame.button,\n          onPress: this.SelectPlayerSelection,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1155,\n            columnNumber: 33\n          }\n        }, React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1156,\n            columnNumber: 37\n          }\n        }, \"View a specific player stats\")));\n      }\n\n      if (displayReviewGameStats == true) {\n        if (SportType == 'GAA') {\n          ReviewGameStats = React.createElement(ScrollView, {\n            style: stylesViewGame.container,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1176,\n              columnNumber: 33\n            }\n          }, React.createElement(View, {\n            style: stylesViewGame.headerContainer,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1177,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1178,\n              columnNumber: 41\n            }\n          }, this.state.TeamName)), React.createElement(View, {\n            style: stylesViewGame.StatRow,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1181,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1182,\n              columnNumber: 41\n            }\n          }, \" Goals: \", this.state.totalTeamGoals), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1183,\n              columnNumber: 41\n            }\n          }, \" Points: \", this.state.totalTeamPoints), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1184,\n              columnNumber: 41\n            }\n          }, \" Shots: \", this.state.totalTeamShots), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1185,\n              columnNumber: 41\n            }\n          }, \" Shots on target: \", this.state.totalTeamShotsOnTarget)), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.TeamSpecificStat,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1188,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1189,\n              columnNumber: 41\n            }\n          }, \"Review a specific stat from \", this.state.TeamName, \" \")), React.createElement(View, {\n            style: stylesViewGame.headerContainer,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1193,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1194,\n              columnNumber: 41\n            }\n          }, \" Opponents\")), React.createElement(View, {\n            style: stylesViewGame.StatRow,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1197,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1198,\n              columnNumber: 41\n            }\n          }, \" Goals: \", this.state.totalOpponentsTeamGoals), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1199,\n              columnNumber: 41\n            }\n          }, \" Points: \", this.state.totalOpponentsTeamPoints), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1200,\n              columnNumber: 41\n            }\n          }, \" Shots: \", this.state.totalOpponentsTeamShots), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1201,\n              columnNumber: 41\n            }\n          }, \" Shots on target: \", this.state.totalOpponentsTeamShotsOnTarget)), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.OpponentsSpecificStat,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1204,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1205,\n              columnNumber: 41\n            }\n          }, \"Review a specific stat from the Opponents records\")));\n        } else if (SportType == 'Soccer') {\n          ReviewGameStats = React.createElement(ScrollView, {\n            style: stylesViewGame.container,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1218,\n              columnNumber: 33\n            }\n          }, React.createElement(View, {\n            style: stylesViewGame.headerContainer,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1220,\n              columnNumber: 41\n            }\n          }, this.state.TeamName)), React.createElement(View, {\n            style: stylesViewGame.StatRow,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1223,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1224,\n              columnNumber: 41\n            }\n          }, \" Goals: \", this.state.totalTeamGoals), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1225,\n              columnNumber: 41\n            }\n          }, \" Shots: \", this.state.totalTeamShots), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1226,\n              columnNumber: 41\n            }\n          }, \" Shots on target: \", this.state.totalTeamShotsOnTarget)), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.TeamSpecificStat,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1229,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1230,\n              columnNumber: 41\n            }\n          }, \"Review a specific stat from \", this.state.TeamName, \" \")), React.createElement(View, {\n            style: stylesViewGame.headerContainer,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1234,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1235,\n              columnNumber: 41\n            }\n          }, \" Opponents\")), React.createElement(View, {\n            style: stylesViewGame.StatRow,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1238,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1239,\n              columnNumber: 41\n            }\n          }, \" Goals: \", this.state.totalOpponentsTeamGoals), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1240,\n              columnNumber: 41\n            }\n          }, \" Shots: \", this.state.totalOpponentsTeamShots), React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1241,\n              columnNumber: 41\n            }\n          }, \" Shots on target: \", this.state.totalOpponentsTeamShotsOnTarget)), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.OpponentsSpecificStat,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1244,\n              columnNumber: 37\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1245,\n              columnNumber: 41\n            }\n          }, \"Review a specific stat from the Opponents records\")));\n        }\n      }\n\n      if (SelectAnEvent_ReviewGameStats_YourTeam) {\n        if (SportType == 'GAA') {\n          ReviewPlayerStats = React.createElement(ScrollView, {\n            style: stylesViewGame.container,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1264,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1266,\n              columnNumber: 41\n            }\n          }, \"Select a stat below\"), React.createElement(Picker, {\n            selectedValue: this.state.YourTeamEventSelection,\n            style: stylesViewGame.input,\n            onValueChange: function onValueChange(text) {\n              return _this3.setState({\n                YourTeamEventSelection: text\n              });\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1268,\n              columnNumber: 41\n            }\n          }, React.createElement(Picker.Item, {\n            label: \"Select a event\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1274,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Goal\",\n            value: \"Goal\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1275,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Point\",\n            value: \"Point\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1276,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Pass\",\n            value: \"Pass\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1277,\n              columnNumber: 45\n            }\n          })), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.ExecuteYourTeamEventAnaylsis,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1282,\n              columnNumber: 41\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1283,\n              columnNumber: 45\n            }\n          }, \"Review this teams games stats\")));\n        } else if (SportType == 'Soccer') {\n          ReviewPlayerStats = React.createElement(ScrollView, {\n            style: stylesViewGame.container,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1294,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1296,\n              columnNumber: 41\n            }\n          }, \"Select a stat below\"), React.createElement(Picker, {\n            selectedValue: this.state.YourTeamEventSelection,\n            style: stylesViewGame.input,\n            onValueChange: function onValueChange(text) {\n              return _this3.setState({\n                YourTeamEventSelection: text\n              });\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1298,\n              columnNumber: 41\n            }\n          }, React.createElement(Picker.Item, {\n            label: \"Select a event\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1304,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Goal\",\n            value: \"Goal\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1305,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Pass\",\n            value: \"Pass\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1306,\n              columnNumber: 45\n            }\n          })), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.ExecuteYourTeamEventAnaylsis,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1311,\n              columnNumber: 41\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1312,\n              columnNumber: 45\n            }\n          }, \"Review this teams games stats\")));\n        }\n      }\n\n      if (SelectAnEvent_ReviewGameStats_Opponents) {\n        if (SportType == 'GAA') {\n          ReviewPlayerStats = React.createElement(ScrollView, {\n            style: stylesViewGame.container,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1328,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1330,\n              columnNumber: 37\n            }\n          }, \"Select a stat below\"), React.createElement(Picker, {\n            selectedValue: this.state.OpponentsEventSelection,\n            style: stylesViewGame.input,\n            onValueChange: function onValueChange(text) {\n              return _this3.setState({\n                OpponentsEventSelection: text\n              });\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1332,\n              columnNumber: 41\n            }\n          }, React.createElement(Picker.Item, {\n            label: \"Select a event\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1338,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Goal\",\n            value: \"Goal\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1339,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Point\",\n            value: \"Point\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1340,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Pass\",\n            value: \"Pass\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1341,\n              columnNumber: 45\n            }\n          })), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.ExecuteOpponentsPlayerEventAnaylsis,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1346,\n              columnNumber: 45\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1347,\n              columnNumber: 49\n            }\n          }, \"Submit\")));\n        } else if (SportType == 'Soccer') {\n          ReviewPlayerStats = React.createElement(ScrollView, {\n            style: stylesViewGame.container,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1358,\n              columnNumber: 33\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1360,\n              columnNumber: 37\n            }\n          }, \"Select a stat\"), React.createElement(Picker, {\n            selectedValue: this.state.OpponentsEventSelection,\n            style: stylesViewGame.input,\n            onValueChange: function onValueChange(text) {\n              return _this3.setState({\n                OpponentsEventSelection: text\n              });\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1362,\n              columnNumber: 41\n            }\n          }, React.createElement(Picker.Item, {\n            label: \"Select a event\",\n            value: \"\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1368,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Goal\",\n            value: \"Goal\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1369,\n              columnNumber: 45\n            }\n          }), React.createElement(Picker.Item, {\n            label: \"Pass\",\n            value: \"Pass\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1370,\n              columnNumber: 45\n            }\n          })), React.createElement(TouchableOpacity, {\n            style: stylesViewGame.button,\n            onPress: this.ExecuteOpponentsPlayerEventAnaylsis,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1375,\n              columnNumber: 45\n            }\n          }, React.createElement(Text, {\n            style: stylesViewGame.Text,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1376,\n              columnNumber: 49\n            }\n          }, \"Submit\")));\n        }\n      }\n\n      if (SelectAnEvent_ReviewGameStats_YourTeamPlayer == true) {\n        ReviewPlayerStats = React.createElement(ScrollView, {\n          style: stylesViewGame.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1392,\n            columnNumber: 29\n          }\n        }, React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1394,\n            columnNumber: 33\n          }\n        }, \"Select a player\"), React.createElement(Picker, {\n          selectedValue: this.state.selectedTeamPlayer,\n          style: stylesViewGame.input,\n          onValueChange: function onValueChange(text) {\n            return _this3.setState({\n              selectedTeamPlayer: text\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1396,\n            columnNumber: 33\n          }\n        }, React.createElement(Picker.Item, {\n          label: \"Select a Player\",\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1402,\n            columnNumber: 33\n          }\n        }), this.state.PlayerData.map(function (item, index) {\n          return React.createElement(Picker.Item, {\n            label: item.PlayerName,\n            value: item.PlayerID,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1406,\n              columnNumber: 49\n            }\n          });\n        })), React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1414,\n            columnNumber: 33\n          }\n        }, \"Select a stat (*Optional*)\"), React.createElement(Picker, {\n          selectedValue: this.state.YourTeamEventSelection,\n          style: stylesViewGame.input,\n          onValueChange: function onValueChange(text) {\n            return _this3.setState({\n              YourTeamEventSelection: text\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1416,\n            columnNumber: 33\n          }\n        }, React.createElement(Picker.Item, {\n          label: \"Select a event\",\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1422,\n            columnNumber: 41\n          }\n        }), React.createElement(Picker.Item, {\n          label: \"Goal\",\n          value: \"Goal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1423,\n            columnNumber: 41\n          }\n        }), React.createElement(Picker.Item, {\n          label: \"Pass\",\n          value: \"Pass\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1424,\n            columnNumber: 41\n          }\n        })), React.createElement(TouchableOpacity, {\n          style: stylesViewGame.button,\n          onPress: this.ReviewPlayerStats,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1429,\n            columnNumber: 33\n          }\n        }, React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1430,\n            columnNumber: 37\n          }\n        }, \"Review this players games stats\")), React.createElement(TouchableOpacity, {\n          style: stylesViewGame.button,\n          onPress: this.GetSpecificPlayerEventLocations,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1434,\n            columnNumber: 33\n          }\n        }, React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1435,\n            columnNumber: 37\n          }\n        }, \"Review this players event locations\")));\n      }\n\n      if (SelectAnEvent_ReviewGameStats_Opponents_TeamPlayer == true) {\n        ReviewPlayerStats = React.createElement(ScrollView, {\n          style: stylesViewGame.container,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1452,\n            columnNumber: 26\n          }\n        }, React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1454,\n            columnNumber: 30\n          }\n        }, \"Select an Opponents player\"), React.createElement(Picker, {\n          selectedValue: this.state.selectedOpponentsPlayer,\n          style: stylesViewGame.input,\n          onValueChange: function onValueChange(text) {\n            return _this3.setState({\n              selectedOpponentsPlayer: text\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1456,\n            columnNumber: 30\n          }\n        }, React.createElement(Picker.Item, {\n          label: \"Select a Player\",\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1462,\n            columnNumber: 30\n          }\n        }), this.state.OpponentsPlayerData.map(function (item, index) {\n          return React.createElement(Picker.Item, {\n            label: item.PlayerName,\n            value: item.PlayerID,\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1466,\n              columnNumber: 46\n            }\n          });\n        })), React.createElement(TouchableOpacity, {\n          style: stylesViewGame.button,\n          onPress: this.ReviewOpponentsPlayerStats,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1474,\n            columnNumber: 30\n          }\n        }, React.createElement(Text, {\n          style: stylesViewGame.Text,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1475,\n            columnNumber: 34\n          }\n        }, \"Review this players games stats\")));\n      }\n\n      if (YourTeamSpecificStatFieldEvents == true) {\n        if (SportType == 'GAA') {\n          if (screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight) {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1516,\n                  columnNumber: 41\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1518,\n                  columnNumber: 45\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxGAA,\n                source: require(\"./GAApitch1.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1521,\n                  columnNumber: 45\n                }\n              }), this.state.EventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1526,\n                    columnNumber: 61\n                  }\n                });\n              })));\n            } else {\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1561,\n                  columnNumber: 41\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1563,\n                  columnNumber: 41\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxGAA,\n                source: require(\"./GAApitch1.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1565,\n                  columnNumber: 53\n                }\n              }), this.state.EventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1569,\n                    columnNumber: 57\n                  }\n                });\n              })));\n            }\n          } else {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1611,\n                  columnNumber: 37\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1613,\n                  columnNumber: 41\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxGAA,\n                source: require(\"./GAApitch1.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1616,\n                  columnNumber: 45\n                }\n              }), this.state.EventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1620,\n                    columnNumber: 53\n                  }\n                });\n              })));\n            }\n\n            FieldWithPlots = React.createElement(ScrollView, {\n              horizontal: true,\n              style: stylesViewGame.imagePlotContainer,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1644,\n                columnNumber: 33\n              }\n            }, React.createElement(ScrollView, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1646,\n                columnNumber: 37\n              }\n            }, React.createElement(Image, {\n              style: stylesViewGame.imagePxGAA,\n              source: require(\"./GAApitch1.png\"),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1649,\n                columnNumber: 41\n              }\n            }), this.state.EventFieldLocations.map(function (data) {\n              return React.createElement(View, {\n                style: {\n                  position: 'absolute',\n                  left: data.x,\n                  top: data.y,\n                  backgroundColor: '#242424',\n                  width: 10,\n                  height: 10,\n                  borderRadius: 50\n                },\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1653,\n                  columnNumber: 49\n                }\n              });\n            })));\n          }\n        } else if (SportType == 'Soccer') {\n          if (screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight) {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1687,\n                  columnNumber: 41\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1688,\n                  columnNumber: 49\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imageSoccerMobile,\n                source: require(\"./SoccerField.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1692,\n                  columnNumber: 53\n                }\n              }), this.state.EventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1696,\n                    columnNumber: 61\n                  }\n                });\n              })));\n            } else {\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1724,\n                  columnNumber: 41\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1725,\n                  columnNumber: 45\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxSoccer,\n                source: require(\"./SoccerField.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1728,\n                  columnNumber: 45\n                }\n              }), this.state.EventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1732,\n                    columnNumber: 53\n                  }\n                });\n              })));\n            }\n          } else {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1766,\n                  columnNumber: 41\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1767,\n                  columnNumber: 41\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imageSoccerMobile,\n                source: require(\"./SoccerField.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1772,\n                  columnNumber: 41\n                }\n              }), this.state.EventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1776,\n                    columnNumber: 61\n                  }\n                });\n              })));\n            }\n\n            FieldWithPlots = React.createElement(ScrollView, {\n              horizontal: true,\n              style: stylesViewGame.imagePlotContainer,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1803,\n                columnNumber: 37\n              }\n            }, React.createElement(ScrollView, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1804,\n                columnNumber: 37\n              }\n            }, React.createElement(Image, {\n              style: stylesViewGame.imagePxSoccer,\n              source: require(\"./SoccerField.png\"),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1806,\n                columnNumber: 45\n              }\n            }), this.state.EventFieldLocations.map(function (data) {\n              return React.createElement(View, {\n                style: {\n                  position: 'absolute',\n                  left: data.x,\n                  top: data.y,\n                  backgroundColor: '#242424',\n                  width: 10,\n                  height: 10,\n                  borderRadius: 50\n                },\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1810,\n                  columnNumber: 53\n                }\n              });\n            })));\n          }\n        }\n      }\n\n      if (OpponentsSpecificStatFieldEvents == true) {\n        if (SportType == 'GAA') {\n          if (screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight) {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1863,\n                  columnNumber: 53\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1865,\n                  columnNumber: 57\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxGAA,\n                source: require(\"./GAApitch1.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1868,\n                  columnNumber: 57\n                }\n              }), this.state.OpponentsEventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1873,\n                    columnNumber: 73\n                  }\n                });\n              })));\n            } else {\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1908,\n                  columnNumber: 53\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1910,\n                  columnNumber: 53\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxGAA,\n                source: require(\"./GAApitch1.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1912,\n                  columnNumber: 65\n                }\n              }), this.state.OpponentsEventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1916,\n                    columnNumber: 69\n                  }\n                });\n              })));\n            }\n          } else {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1958,\n                  columnNumber: 49\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1960,\n                  columnNumber: 53\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxGAA,\n                source: require(\"./GAApitch1.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1963,\n                  columnNumber: 57\n                }\n              }), this.state.OpponentsEventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1967,\n                    columnNumber: 65\n                  }\n                });\n              })));\n            }\n\n            FieldWithPlots = React.createElement(ScrollView, {\n              horizontal: true,\n              style: stylesViewGame.imagePlotContainer,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1991,\n                columnNumber: 45\n              }\n            }, React.createElement(ScrollView, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1993,\n                columnNumber: 49\n              }\n            }, React.createElement(Image, {\n              style: stylesViewGame.imagePxGAA,\n              source: require(\"./GAApitch1.png\"),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1996,\n                columnNumber: 53\n              }\n            }), this.state.OpponentsEventFieldLocations.map(function (data) {\n              return React.createElement(View, {\n                style: {\n                  position: 'absolute',\n                  left: data.x,\n                  top: data.y,\n                  backgroundColor: '#242424',\n                  width: 10,\n                  height: 10,\n                  borderRadius: 50\n                },\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2000,\n                  columnNumber: 61\n                }\n              });\n            })));\n          }\n        } else if (SportType == 'Soccer') {\n          if (screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight) {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2034,\n                  columnNumber: 53\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2035,\n                  columnNumber: 61\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imageSoccerMobile,\n                source: require(\"./SoccerField.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2039,\n                  columnNumber: 65\n                }\n              }), this.state.OpponentsEventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 2043,\n                    columnNumber: 73\n                  }\n                });\n              })));\n            } else {\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2071,\n                  columnNumber: 53\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2072,\n                  columnNumber: 57\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imagePxSoccer,\n                source: require(\"./SoccerField.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2075,\n                  columnNumber: 57\n                }\n              }), this.state.OpponentsEventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 2079,\n                    columnNumber: 65\n                  }\n                });\n              })));\n            }\n          } else {\n            if (screenWidth < 600 || screenHeight < 376) {\n              alert('Warnin1g - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\n              FieldWithPlots = React.createElement(ScrollView, {\n                horizontal: true,\n                style: stylesViewGame.imagePlotContainer,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2113,\n                  columnNumber: 53\n                }\n              }, React.createElement(ScrollView, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2114,\n                  columnNumber: 53\n                }\n              }, React.createElement(Image, {\n                style: stylesViewGame.imageSoccerMobile,\n                source: require(\"./SoccerField.png\"),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2119,\n                  columnNumber: 53\n                }\n              }), this.state.OpponentsEventFieldLocations.map(function (data) {\n                return React.createElement(View, {\n                  style: {\n                    position: 'absolute',\n                    left: data.x,\n                    top: data.y,\n                    backgroundColor: '#242424',\n                    width: 10,\n                    height: 10,\n                    borderRadius: 50\n                  },\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 2123,\n                    columnNumber: 73\n                  }\n                });\n              })));\n            }\n\n            FieldWithPlots = React.createElement(ScrollView, {\n              horizontal: true,\n              style: stylesViewGame.imagePlotContainer,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 2150,\n                columnNumber: 49\n              }\n            }, React.createElement(ScrollView, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 2151,\n                columnNumber: 49\n              }\n            }, React.createElement(Image, {\n              style: stylesViewGame.imagePxSoccer,\n              source: require(\"./SoccerField.png\"),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 2153,\n                columnNumber: 57\n              }\n            }), this.state.OpponentsEventFieldLocations.map(function (data) {\n              return React.createElement(View, {\n                style: {\n                  position: 'absolute',\n                  left: data.x,\n                  top: data.y,\n                  backgroundColor: '#242424',\n                  width: 10,\n                  height: 10,\n                  borderRadius: 50\n                },\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 2157,\n                  columnNumber: 65\n                }\n              });\n            })));\n          }\n        }\n      }\n\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          backgroundColor: '#252626'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2188,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2191,\n          columnNumber: 25\n        }\n      }, ReviewSelection), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2194,\n          columnNumber: 25\n        }\n      }, FieldWithPlots), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2197,\n          columnNumber: 25\n        }\n      }, ReviewGameStats), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2201,\n          columnNumber: 25\n        }\n      }, ReviewPlayerStats), React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2205,\n          columnNumber: 25\n        }\n      }, PlayerStats));\n    }\n  }]);\n\n  return ViewGame;\n}(Component);\n\nvar stylesViewGame = StyleSheet.create({\n  container: {\n    backgroundColor: '#242424',\n    marginTop: 50,\n    marginBottom: 5,\n    marginLeft: 5,\n    marginRight: 5,\n    paddingLeft: 5\n  },\n  Text: {\n    color: \"white\",\n    fontSize: 18,\n    justifyContent: 'center'\n  },\n  headerContainer: {\n    backgroundColor: '#FF6D01',\n    alignItems: \"center\",\n    borderWidth: 4,\n    borderColor: '#ffffff',\n    alignItems: 'center',\n    width: wp('50%'),\n    marginTop: 30,\n    padding: 4\n  },\n  StatRow: {\n    flex: 1,\n    alignItems: \"center\",\n    marginBottom: 10,\n    borderWidth: 4,\n    borderColor: '#ffffff'\n  },\n  dataContainer: {\n    backgroundColor: '#ffffff',\n    alignItems: 'center'\n  },\n  container2: {\n    backgroundColor: '#ffffff',\n    alignItems: 'center'\n  },\n  input: {\n    height: 48,\n    borderRadius: 5,\n    overflow: 'hidden',\n    backgroundColor: 'white',\n    marginTop: 10,\n    marginBottom: 10,\n    marginLeft: 30,\n    marginRight: 30,\n    paddingLeft: 16\n  },\n  button: {\n    backgroundColor: '#FF6D01',\n    marginLeft: 30,\n    marginRight: 30,\n    marginTop: 20,\n    height: 48,\n    borderRadius: 5,\n    alignItems: \"center\",\n    justifyContent: 'center'\n  },\n  imagePxGAA: {\n    height: 376,\n    width: 700\n  },\n  imagePxGAAmobile: {\n    height: 300,\n    width: 590\n  },\n  imagePxSoccer: {\n    height: 400,\n    width: 700\n  },\n  imageSoccerMobile: {\n    height: 280,\n    width: 480\n  },\n  imagePlotContainer: {},\n  imageGAA: {\n    width: win.width,\n    height: 300 * ratioGaaView\n  },\n  imageSoccer: {\n    width: win.width,\n    height: 376 * ratioSoccerView,\n    top: '20%'\n  }\n});\nexport default ViewGame;","map":{"version":3,"sources":["D:/StatsAppNative/MyApp/screens/ViewGame/ViewGame.js"],"names":["React","useEffect","useState","Component","firebase","ThemeColors","widthPercentageToDP","wp","heightPercentageToDP","hp","Picker","screenWidth","Dimensions","get","width","screenHeight","height","win","ratioGaaView","ratioSoccerView","ViewGame","props","filterGameData","totalTeamGoals","state","myUserId","auth","currentUser","uid","navigation","setParams","navigate","params","tempArr","tempArrOpponents","query","database","ref","child","GameRecordKey","StatsRecordKey","on","snapshot","gameObj","val","setState","StatsStoredUsingScreenWidth","StatsStoredUsingScreenHeight","totalTeamShots","totalTeamShotsOnTarget","totalOpponentsTeamGoals","totalOpponentsTeamShots","totalOpponentsTeamShotsOnTarget","snapshotToArray","EventFieldLocations","OpponentsEventFieldLocations","GetSelectedYourTeamPlayerStats","value","tempArrYourTeam","key","YourTeamPlayerData","console","log","OpponentsPlayerData","GetSelectedOpponentsPlayerStats","ReviewPlayerStats","itemKey","selectedTeamPlayer","YourTeamEventSelection","alert","displayReviewGameStats","displaySelectedPlayerStats","orderByChild","equalTo","playerObj","i","length","Goals","Points","Passes","PlayerKitNumber","PlayerName","PlayerPosition","Shots","ShotsOnTarget","ReviewOpponentsPlayerStats","selectedOpponentsPlayer","displayOpponentsSelectedPlayerStats","GetSpecificPlayerEventLocations","tempEventFieldLocations","splice","EventType","UserID","PlayerIDSelected","data","x","y","push","ReviewGameStats","displayReviewSelection","TeamSpecificStat","SelectAnEvent_ReviewGameStats_YourTeam","OpponentsSpecificStat","SelectAnEvent_ReviewGameStats_Opponents","ExecuteYourTeamEventAnaylsis","YourTeamSpecificStatFieldEvents","ExecuteOpponentsPlayerEventAnaylsis","OpponentEventSelection","SportType","OpponentsSpecificStatFieldEvents","retArr","forEach","childSnapshot","item","YourTeamSelected","displayReviewOpponentsPlayer","displayReviewYourTeamPlayer","displayTeamOption","PlayerData","OpponentsSelected","SelectPlayerSelection","SelectAnEvent_ReviewGameStats_YourTeamPlayer","TeamName","inviteCode","hasATeam","userType","GameList","GameViewList","UsersScreenHeight","UsersScreenWidth","statRecord","gameStatsRecordsArray","totalTeamPoints","totalTeamPasses","totalOpponentsTeamPoints","totalOpponentsTeamPasses","YourTeamFieldEventsView","OpponentsFieldEventsView","OpponentsEventSelection","displayTeamSpecificEventSelection","displayOpponentsSpecificEventSelection","OpponentsSpecificStatFieldEventsSoccerView","userObj","ReviewSelection","TeamOption","PlayerStats","FieldWithPlots","SelectAnEvent_ReviewGameStats_Opponents_TeamPlayer","stylesViewGame","container","button","Text","headerContainer","StatRow","input","text","map","index","PlayerID","imagePlotContainer","imagePxGAA","require","position","left","top","backgroundColor","borderRadius","imageSoccerMobile","imagePxSoccer","flex","StyleSheet","create","marginTop","marginBottom","marginLeft","marginRight","paddingLeft","color","fontSize","justifyContent","alignItems","borderWidth","borderColor","padding","dataContainer","container2","overflow","imagePxGAAmobile","imageGAA","imageSoccer"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAsCC,SAAtC,QAAwD,OAAxD;;;;;;;;;;;;;;;AASA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,SAAQC,mBAAmB,IAAIC,EAA/B,EAAmCC,oBAAoB,IAAIC,EAA3D,QAAoE,gCAApE;AAGA,SAAQC,MAAR,QAAqB,gCAArB;AAEA,IAAMC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAA7C;AAEA,IAAMC,YAAY,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,MAA9C;AAGA,IAAMC,GAAG,GAAGL,UAAU,CAACC,GAAX,CAAe,QAAf,CAAZ;AAGA,IAAMK,YAAY,GAAGD,GAAG,CAACH,KAAJ,GAAU,GAA/B;AAGA,IAAMK,eAAe,GAAGF,GAAG,CAACH,KAAJ,GAAU,GAAlC;;IAEMM,Q;;;;;AAEF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UA0HrBC,cA1HqB,GA0HJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEXC,cAAAA,cAFW,GAEM,MAAKC,KAAL,CAAWD,cAFjB;AAIXE,cAAAA,QAJW,GAIArB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAJ5B;AAAA,sCAO4B,MAAKP,KAAL,CAAWQ,UAPvC,EAOHL,KAPG,yBAOHA,KAPG,EAOIM,SAPJ,yBAOIA,SAPJ,EAOeC,QAPf,yBAOeA,QAPf;AAQLC,cAAAA,MARK,GAQIR,KAAK,CAACQ,MAAN,IAAgB,EARpB;AAWPC,cAAAA,OAXO,GAWG,EAXH;AAYPC,cAAAA,gBAZO,GAYY,EAZZ;AAgBXC,cAAAA,KAhBW,GAgBH/B,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,OAAxD,EAAiEA,KAAjE,CAAuEN,MAAM,CAACO,aAA9E,EAA6FD,KAA7F,CAAmG,eAAnG,EAAoHA,KAApH,CAA0HN,MAAM,CAACQ,cAAjI,EACXC,EADW,CACR,OADQ,EACC,UAAAC,QAAQ,EAAI;AAGrB,oBAAMC,OAAO,GAAGD,QAAQ,CAACE,GAAT,EAAhB;AAGA,oBAAIjC,WAAW,GAAGgC,OAAO,CAAChC,WAA1B;;AACA,sBAAKkC,QAAL,CAAc;AAACC,kBAAAA,2BAA2B,EAAEnC;AAA9B,iBAAd;;AAEA,oBAAII,YAAY,GAAG4B,OAAO,CAAC5B,YAA3B;;AACA,sBAAK8B,QAAL,CAAc;AAACE,kBAAAA,4BAA4B,EAAEhC;AAA/B,iBAAd;;AAGA,oBAAIQ,cAAc,GAAGoB,OAAO,CAACpB,cAA7B;;AACA,sBAAKsB,QAAL,CAAc;AAACtB,kBAAAA,cAAc,EAAEA;AAAjB,iBAAd;;AAKA,oBAAIyB,cAAc,GAAGL,OAAO,CAACK,cAA7B;;AACA,sBAAKH,QAAL,CAAc;AAACG,kBAAAA,cAAc,EAACA;AAAhB,iBAAd;;AAEA,oBAAIC,sBAAsB,GAAGN,OAAO,CAACM,sBAArC;;AACA,sBAAKJ,QAAL,CAAc;AAACI,kBAAAA,sBAAsB,EAACA;AAAxB,iBAAd;;AAIA,oBAAIC,uBAAuB,GAAGP,OAAO,CAACO,uBAAtC;;AACA,sBAAKL,QAAL,CAAc;AAACK,kBAAAA,uBAAuB,EAAEA;AAA1B,iBAAd;;AAKA,oBAAIC,uBAAuB,GAAGR,OAAO,CAACQ,uBAAtC;;AACA,sBAAKN,QAAL,CAAc;AAACM,kBAAAA,uBAAuB,EAACA;AAAzB,iBAAd;;AAEA,oBAAIC,+BAA+B,GAAGT,OAAO,CAACS,+BAA9C;;AACA,sBAAKP,QAAL,CAAc;AAACO,kBAAAA,+BAA+B,EAACA;AAAjC,iBAAd;AAIC,eA1CO,CAhBG;AA8DThD,cAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAACO,aAA/E,EAA8FD,KAA9F,CAAoG,qBAApG,EACCG,EADD,CACI,OADJ,EACa,UAAAC,QAAQ,EAAI;AAEtBT,gBAAAA,OAAO,GAAG,MAAKoB,eAAL,CAAqBX,QAArB,CAAV;;AAEC,sBAAKG,QAAL,CAAc;AACVS,kBAAAA,mBAAmB,EAAErB;AADX,iBAAd;AAKH,eAVD;AAgBF7B,cAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAACO,aAA/E,EAA8FD,KAA9F,CAAoG,8BAApG,EACCG,EADD,CACI,OADJ,EACa,UAAAC,QAAQ,EAAI;AAErBR,gBAAAA,gBAAgB,GAAG,MAAKmB,eAAL,CAAqBX,QAArB,CAAnB;;AAEA,sBAAKG,QAAL,CAAc;AACVU,kBAAAA,4BAA4B,EAAGrB;AADrB,iBAAd;AAGH,eARD;;AA9EW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1HI;;AAAA,UA0NnBsB,8BA1NmB,GA0Nc,UAAAC,KAAK;AAAA,aAAI,YAAM;AAAA,qCAGL,MAAKpC,KAAL,CAAWQ,UAHN;AAAA,YAGpCL,KAHoC,0BAGpCA,KAHoC;AAAA,YAG7BM,SAH6B,0BAG7BA,SAH6B;AAAA,YAGlBC,QAHkB,0BAGlBA,QAHkB;AAI5C,YAAMC,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgB,EAA/B;AAEA,YAAIP,QAAQ,GAAGrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAA3C;AACA,YAAI8B,eAAe,GAAG,EAAtB;AAEAtD,QAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAAC2B,GAA/E,EAAoFrB,KAApF,CAA0F,UAA1F,EAAsGA,KAAtG,CAA4G,SAA5G,EACKG,EADL,CACQ,OADR,EACiB,UAAAC,QAAQ,EAAI;AAErBgB,UAAAA,eAAe,GAAG,MAAKL,eAAL,CAAqBX,QAArB,CAAlB;;AACA,gBAAKG,QAAL,CAAc;AACVe,YAAAA,kBAAkB,EAAEF;AADV,WAAd;AAIP,SARD;AAUAG,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAKtC,KAAL,CAAWuC,mBAAvB;AAIH,OAvBqC;AAAA,KA1NnB;;AAAA,UAyPnBC,+BAzPmB,GAyPe,UAAAP,KAAK;AAAA,aAAI,YAAM;AAAA,qCAGN,MAAKpC,KAAL,CAAWQ,UAHL;AAAA,YAGrCL,KAHqC,0BAGrCA,KAHqC;AAAA,YAG9BM,SAH8B,0BAG9BA,SAH8B;AAAA,YAGnBC,QAHmB,0BAGnBA,QAHmB;AAI7C,YAAMC,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgB,EAA/B;AAEA,YAAIP,QAAQ,GAAGrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAA3C;AACA,YAAIM,gBAAgB,GAAG,EAAvB;AAEA9B,QAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAAC2B,GAA/E,EAAoFrB,KAApF,CAA0F,WAA1F,EAAuGA,KAAvG,CAA6G,SAA7G,EACKG,EADL,CACQ,OADR,EACiB,UAAAC,QAAQ,EAAI;AAErBR,UAAAA,gBAAgB,GAAG,MAAKmB,eAAL,CAAqBX,QAArB,CAAnB;;AACA,gBAAKG,QAAL,CAAc;AACVkB,YAAAA,mBAAmB,EAAE7B;AADX,WAAd;AAIP,SARD;AAUA2B,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAKtC,KAAL,CAAWuC,mBAAvB;AAIH,OAvBsC;AAAA,KAzPpB;;AAAA,UAmRnBE,iBAnRmB,GAmRC,UAAEC,OAAF,EAAe;AAE/B,UAAIC,kBAAkB,GAAG,MAAK3C,KAAL,CAAW2C,kBAApC;AACA,UAAIC,sBAAsB,GAAG,MAAK5C,KAAL,CAAW4C,sBAAxC;AAEA,UAAI3C,QAAQ,GAAGrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAA3C;AAL+B,mCAQO,MAAKP,KAAL,CAAWQ,UARlB;AAAA,UAQxBL,KARwB,0BAQxBA,KARwB;AAAA,UAQjBM,SARiB,0BAQjBA,SARiB;AAAA,UAQNC,QARM,0BAQNA,QARM;AAShC,UAAMC,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgB,EAA/B;AACA,UAAIC,OAAO,GAAG,MAAKT,KAAL,CAAWS,OAAzB;;AAEC,UAAGkC,kBAAkB,IAAI,EAAzB,EACA;AACI,eAAOE,KAAK,CAAC,wBAAD,CAAZ;AACH,OAHD,MAQA;AACI,cAAKxB,QAAL,CAAc;AAACyB,UAAAA,sBAAsB,EAAE;AAAzB,SAAd;;AACA,cAAKzB,QAAL,CAAc;AAAC0B,UAAAA,0BAA0B,EAAC;AAA5B,SAAd;;AAIAnE,QAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAACO,aAA/E,EAA8FD,KAA9F,CAAoG,UAApG,EAAgHA,KAAhH,CAAsH,SAAtH,EAAiIkC,YAAjI,CAA8I,UAA9I,EAA0JC,OAA1J,CAAkKN,kBAAlK,EACC1B,EADD,CACI,OADJ,EACa,UAAAC,QAAQ,EAAI;AAErB,cAAMgC,SAAS,GAAGhC,QAAQ,CAACE,GAAT,EAAlB;AAIAX,UAAAA,OAAO,GAAG,MAAKoB,eAAL,CAAqBX,QAArB,CAAV;;AAGA,eAAI,IAAIiC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG1C,OAAO,CAAC2C,MAA3B,EAAmCD,CAAC,EAApC,EACA;AAEI,gBAAIE,KAAK,GAAG5C,OAAO,CAAC0C,CAAD,CAAP,CAAWE,KAAvB;;AACA,kBAAKhC,QAAL,CAAc;AAACgC,cAAAA,KAAK,EAACA;AAAP,aAAd;;AAEA,gBAAIC,MAAM,GAAG7C,OAAO,CAAC0C,CAAD,CAAP,CAAWG,MAAxB;;AACA,kBAAKjC,QAAL,CAAc;AAACiC,cAAAA,MAAM,EAACA;AAAR,aAAd;;AAEA,gBAAIC,MAAM,GAAG9C,OAAO,CAAC0C,CAAD,CAAP,CAAWI,MAAxB;;AACA,kBAAKlC,QAAL,CAAc;AAACkC,cAAAA,MAAM,EAACA;AAAR,aAAd;;AAEA,gBAAIC,eAAe,GAAG/C,OAAO,CAAC0C,CAAD,CAAP,CAAWK,eAAjC;;AACA,kBAAKnC,QAAL,CAAc;AAACmC,cAAAA,eAAe,EAACA;AAAjB,aAAd;;AAEA,gBAAIC,UAAU,GAAGhD,OAAO,CAAC0C,CAAD,CAAP,CAAWM,UAA5B;;AACA,kBAAKpC,QAAL,CAAc;AAACoC,cAAAA,UAAU,EAACA;AAAZ,aAAd;;AAEA,gBAAIC,cAAc,GAAGjD,OAAO,CAAC0C,CAAD,CAAP,CAAWO,cAAhC;;AACA,kBAAKrC,QAAL,CAAc;AAACqC,cAAAA,cAAc,EAACA;AAAhB,aAAd;;AAEA,gBAAIC,KAAK,GAAGlD,OAAO,CAAC0C,CAAD,CAAP,CAAWQ,KAAvB;;AACA,kBAAKtC,QAAL,CAAc;AAACsC,cAAAA,KAAK,EAACA;AAAP,aAAd;;AAEA,gBAAIC,aAAa,GAAGnD,OAAO,CAAC0C,CAAD,CAAP,CAAWS,aAA/B;;AACA,kBAAKvC,QAAL,CAAc;AAACuC,cAAAA,aAAa,EAAEA;AAAhB,aAAd;AAEH;AAKJ,SA1CD;AA8CH;AAMJ,KAjWkB;;AAAA,UAqWnBC,0BArWmB,GAqWU,UAAEnB,OAAF,EAAe;AAGxC,UAAIzC,QAAQ,GAAGrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAA3C;AAHwC,mCAKD,MAAKP,KAAL,CAAWQ,UALV;AAAA,UAKhCL,KALgC,0BAKhCA,KALgC;AAAA,UAKzBM,SALyB,0BAKzBA,SALyB;AAAA,UAKdC,QALc,0BAKdA,QALc;AAMxC,UAAMC,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgB,EAA/B;AACA,UAAIC,OAAO,GAAG,MAAKT,KAAL,CAAWS,OAAzB;AAGA,UAAIqD,uBAAuB,GAAG,MAAK9D,KAAL,CAAW8D,uBAAzC;;AAEA,UAAGA,uBAAuB,IAAI,EAA9B,EACA;AACI,eAAOjB,KAAK,CAAC,wBAAD,CAAZ;AACH,OAHD,MAKA;AAEI,cAAKxB,QAAL,CAAc;AAACyB,UAAAA,sBAAsB,EAAE;AAAzB,SAAd;;AACA,cAAKzB,QAAL,CAAc;AAAC0C,UAAAA,mCAAmC,EAAC;AAArC,SAAd;;AAGEnF,QAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAACO,aAA/E,EAA8FD,KAA9F,CAAoG,WAApG,EAAiHA,KAAjH,CAAuH,SAAvH,EAAkIkC,YAAlI,CAA+I,UAA/I,EAA2JC,OAA3J,CAAmKa,uBAAnK,EACC7C,EADD,CACI,OADJ,EACa,UAAAC,QAAQ,EAAI;AAErB,cAAMgC,SAAS,GAAGhC,QAAQ,CAACE,GAAT,EAAlB;AAEAX,UAAAA,OAAO,GAAG,MAAKoB,eAAL,CAAqBX,QAArB,CAAV;;AAGA,eAAI,IAAIiC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG1C,OAAO,CAAC2C,MAA3B,EAAmCD,CAAC,EAApC,EACA;AAEI,gBAAIE,KAAK,GAAG5C,OAAO,CAAC0C,CAAD,CAAP,CAAWE,KAAvB;;AACA,kBAAKhC,QAAL,CAAc;AAACgC,cAAAA,KAAK,EAACA;AAAP,aAAd;;AAEA,gBAAIC,MAAM,GAAG7C,OAAO,CAAC0C,CAAD,CAAP,CAAWG,MAAxB;;AACA,kBAAKjC,QAAL,CAAc;AAACiC,cAAAA,MAAM,EAACA;AAAR,aAAd;;AAEA,gBAAIC,MAAM,GAAG9C,OAAO,CAAC0C,CAAD,CAAP,CAAWI,MAAxB;;AACA,kBAAKlC,QAAL,CAAc;AAACkC,cAAAA,MAAM,EAACA;AAAR,aAAd;;AAEA,gBAAIC,eAAe,GAAG/C,OAAO,CAAC0C,CAAD,CAAP,CAAWK,eAAjC;;AACA,kBAAKnC,QAAL,CAAc;AAACmC,cAAAA,eAAe,EAACA;AAAjB,aAAd;;AAEA,gBAAIC,UAAU,GAAGhD,OAAO,CAAC0C,CAAD,CAAP,CAAWM,UAA5B;;AACA,kBAAKpC,QAAL,CAAc;AAACoC,cAAAA,UAAU,EAACA;AAAZ,aAAd;;AAEA,gBAAIC,cAAc,GAAGjD,OAAO,CAAC0C,CAAD,CAAP,CAAWO,cAAhC;;AACA,kBAAKrC,QAAL,CAAc;AAACqC,cAAAA,cAAc,EAACA;AAAhB,aAAd;;AAEA,gBAAIC,KAAK,GAAGlD,OAAO,CAAC0C,CAAD,CAAP,CAAWQ,KAAvB;;AACA,kBAAKtC,QAAL,CAAc;AAACsC,cAAAA,KAAK,EAACA;AAAP,aAAd;;AAEA,gBAAIC,aAAa,GAAGnD,OAAO,CAAC0C,CAAD,CAAP,CAAWS,aAA/B;;AACA,kBAAKvC,QAAL,CAAc;AAACuC,cAAAA,aAAa,EAAEA;AAAhB,aAAd;AAEH;AAGJ,SAtCD;AA0CH;AASF,KA/ac;;AAAA,UAkbnBI,+BAlbmB,GAkbe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAG9BlC,cAAAA,mBAH8B,GAGR,MAAK9B,KAAL,CAAW8B,mBAHH;AAK9Bc,cAAAA,sBAL8B,GAKL,MAAK5C,KAAL,CAAW4C,sBALN;AAO9BD,cAAAA,kBAP8B,GAOT,MAAK3C,KAAL,CAAW2C,kBAPF;AAS9B1C,cAAAA,QAT8B,GASnBrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GATT;AAU9B6D,cAAAA,uBAV8B,GAUJ,MAAKjE,KAAL,CAAWiE,uBAVP;;AAAA,oBAa3BtB,kBAAkB,IAAI,EAbK;AAAA;AAAA;AAAA;;AAAA,oBAgBvBC,sBAAsB,IAAI,EAhBH;AAAA;AAAA;AAAA;;AAAA,gDAkBfC,KAAK,CAAC,wBAAD,CAlBU;;AAAA;AAAA,uCAuBiB,MAAKhD,KAAL,CAAWQ,UAvB5B,EAuBdL,KAvBc,0BAuBdA,KAvBc,EAuBPM,SAvBO,0BAuBPA,SAvBO,EAuBIC,QAvBJ,0BAuBIA,QAvBJ;AAwBhBC,cAAAA,MAxBgB,GAwBPR,KAAK,CAACQ,MAAN,IAAgB,EAxBT;AA2BtByD,cAAAA,uBAAuB,CAACC,MAAxB,CAA+B,CAA/B,EAAiCD,uBAAuB,CAACb,MAAzD;;AAGA,mBAASD,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGrB,mBAAmB,CAACsB,MAAxC,EAAgDD,CAAC,EAAjD,EACA;AAMI,oBAAGrB,mBAAmB,CAACqB,CAAD,CAAnB,CAAuBgB,SAAvB,IAAoCvB,sBAApC,IAA8Dd,mBAAmB,CAACqB,CAAD,CAAnB,CAAuBiB,MAAvB,IAAiCC,gBAAlG,EACA;AAEQC,kBAAAA,IAFR,GAEe;AACPC,oBAAAA,CAAC,EAACzC,mBAAmB,CAACqB,CAAD,CAAnB,CAAuBoB,CADlB;AAEPC,oBAAAA,CAAC,EAAC1C,mBAAmB,CAACqB,CAAD,CAAnB,CAAuBqB;AAFlB,mBAFf;;AASI,wBAAKxE,KAAL,CAAWiE,uBAAX,CAAmCQ,IAAnC,CAAwCH,IAAxC;AAEH;AACJ;;AAlDqB;AAAA;AAAA;;AAAA;AAAA,gDA4DnBzB,KAAK,CAAC,wBAAD,CA5Dc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlbf;;AAAA,UAqfnB6B,eArfmB,GAqfD;AAAA;AAAA;AAAA;AAAA;AAEd,oBAAKrD,QAAL,CAAc;AAACsD,gBAAAA,sBAAsB,EAAC;AAAxB,eAAd;;AAEA,oBAAKtD,QAAL,CAAc;AAAEyB,gBAAAA,sBAAsB,EAAE;AAA1B,eAAd;;AAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KArfC;;AAAA,UA6fnB8B,gBA7fmB,GA6fA;AAAA;AAAA;AAAA;AAAA;AAEf,oBAAKvD,QAAL,CAAc;AAAEwD,gBAAAA,sCAAsC,EAAC;AAAzC,eAAd;;AAEA,oBAAKxD,QAAL,CAAc;AAAEsD,gBAAAA,sBAAsB,EAAE;AAA1B,eAAd;;AAGA,oBAAKtD,QAAL,CAAc;AAAEyB,gBAAAA,sBAAsB,EAAE;AAA1B,eAAd;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7fA;;AAAA,UA2gBnBgC,qBA3gBmB,GA2gBK;AAAA;AAAA;AAAA;AAAA;AAEpB,oBAAKzD,QAAL,CAAc;AAAE0D,gBAAAA,uCAAuC,EAAC;AAA1C,eAAd;;AAEA,oBAAK1D,QAAL,CAAc;AAAEyB,gBAAAA,sBAAsB,EAAE;AAA1B,eAAd;;AAEA,oBAAKzB,QAAL,CAAc;AAAEsD,gBAAAA,sBAAsB,EAAE;AAA1B,eAAd;;AANoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3gBL;;AAAA,UAohBnBK,4BAphBmB,GAohBY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGrBpC,cAAAA,sBAHqB,GAGI,MAAK5C,KAAL,CAAW4C,sBAHf;AAMrBd,cAAAA,mBANqB,GAMC,MAAK9B,KAAL,CAAW8B,mBANZ;AAQrB7B,cAAAA,QARqB,GAQVrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GARlB;AASrB6D,cAAAA,uBATqB,GASK,MAAKjE,KAAL,CAAWiE,uBAThB;AAAA,uCAcc,MAAKpE,KAAL,CAAWQ,UAdzB,EAcjBL,KAdiB,0BAcjBA,KAdiB,EAcVM,SAdU,0BAcVA,SAdU,EAcCC,QAdD,0BAcCA,QAdD;AAenBC,cAAAA,MAfmB,GAeVR,KAAK,CAACQ,MAAN,IAAgB,EAfN;AAkBzByD,cAAAA,uBAAuB,CAACC,MAAxB,CAA+B,CAA/B,EAAiCD,uBAAuB,CAACb,MAAzD;;AAGA,mBAASD,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGrB,mBAAmB,CAACsB,MAAxC,EAAgDD,CAAC,EAAjD,EACA;AAEI,oBAAGrB,mBAAmB,CAACqB,CAAD,CAAnB,CAAuBgB,SAAvB,IAAoCvB,sBAAvC,EACA;AAEQ0B,kBAAAA,IAFR,GAEe;AACPC,oBAAAA,CAAC,EAACzC,mBAAmB,CAACqB,CAAD,CAAnB,CAAuBoB,CADlB;AAEPC,oBAAAA,CAAC,EAAC1C,mBAAmB,CAACqB,CAAD,CAAnB,CAAuBqB;AAFlB,mBAFf;;AASI,wBAAKxE,KAAL,CAAWiE,uBAAX,CAAmCQ,IAAnC,CAAwCH,IAAxC;AAEH;AACJ;;AAGD,oBAAKjD,QAAL,CAAc;AAACwD,gBAAAA,sCAAsC,EAAC;AAAxC,eAAd;;AAGE,oBAAKxD,QAAL,CAAc;AAAC4D,gBAAAA,+BAA+B,EAAC;AAAjC,eAAd;;AA3CuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAphBZ;;AAAA,UAokBnBC,mCApkBmB,GAokBmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAG9BC,cAAAA,sBAH8B,GAGL,MAAKnF,KAAL,CAAWmF,sBAHN;AAM9BpD,cAAAA,4BAN8B,GAMC,MAAK/B,KAAL,CAAW+B,4BANZ;AAQ9B9B,cAAAA,QAR8B,GAQnBrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GART;AAS9B6D,cAAAA,uBAT8B,GASJ,MAAKjE,KAAL,CAAWiE,uBATP;AAW9BmB,cAAAA,SAX8B,GAWlB,MAAKpF,KAAL,CAAWoF,SAXO;AAAA,uCAcK,MAAKvF,KAAL,CAAWQ,UAdhB,EAc1BL,KAd0B,0BAc1BA,KAd0B,EAcnBM,SAdmB,0BAcnBA,SAdmB,EAcRC,QAdQ,0BAcRA,QAdQ;AAe5BC,cAAAA,MAf4B,GAenBR,KAAK,CAACQ,MAAN,IAAgB,EAfG;AAkBlCyD,cAAAA,uBAAuB,CAACC,MAAxB,CAA+B,CAA/B,EAAiCD,uBAAuB,CAACb,MAAzD;;AAGA,mBAASD,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGpB,4BAA4B,CAACqB,MAAjD,EAAyDD,CAAC,EAA1D,EACA;AAEI,oBAAGpB,4BAA4B,CAACoB,CAAD,CAA5B,CAAgCgB,SAAhC,IAA6CgB,sBAAhD,EACA;AAEQb,kBAAAA,IAFR,GAEe;AACPC,oBAAAA,CAAC,EAACxC,4BAA4B,CAACoB,CAAD,CAA5B,CAAgCoB,CAD3B;AAEPC,oBAAAA,CAAC,EAACzC,4BAA4B,CAACoB,CAAD,CAA5B,CAAgCqB;AAF3B,mBAFf;;AASI,wBAAKxE,KAAL,CAAWiE,uBAAX,CAAmCQ,IAAnC,CAAwCH,IAAxC;AAEH;AACJ;;AAGD,oBAAKjD,QAAL,CAAc;AAAC0D,gBAAAA,uCAAuC,EAAC;AAAzC,eAAd;;AAIA,oBAAK1D,QAAL,CAAc;AAACgE,gBAAAA,gCAAgC,EAAC;AAAlC,eAAd;;AA5CkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApkBnB;;AAAA,UAqnBnBxD,eArnBmB,GAqnBD,UAAAX,QAAQ,EAAI;AAC1B,UAAIoE,MAAM,GAAG,EAAb;AACApE,MAAAA,QAAQ,CAACqE,OAAT,CAAiB,UAAAC,aAAa,EAAI;AAC9B,YAAIC,IAAI,GAAGD,aAAa,CAACpE,GAAd,EAAX;AACAqE,QAAAA,IAAI,CAACtD,GAAL,GAAWqD,aAAa,CAACrD,GAAzB;AACAmD,QAAAA,MAAM,CAACb,IAAP,CAAYgB,IAAZ;AACH,OAJD;AAKA,aAAOH,MAAP;AACH,KA7nBkB;;AAAA,UAgoBnBI,gBAhoBmB,GAgoBA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEf,oBAAKrE,QAAL,CAAc;AAAEsE,gBAAAA,4BAA4B,EAAC;AAA/B,eAAd;;AACA,oBAAKtE,QAAL,CAAc;AAAEsD,gBAAAA,sBAAsB,EAAC;AAAzB,eAAd;;AACA,oBAAKtD,QAAL,CAAc;AAAEuE,gBAAAA,2BAA2B,EAAC;AAA9B,eAAd;;AACA,oBAAKvE,QAAL,CAAc;AAAEwE,gBAAAA,iBAAiB,EAAE;AAArB,eAAd;;AALe,uCAWwB,MAAKhG,KAAL,CAAWQ,UAXnC,EAWPL,KAXO,0BAWPA,KAXO,EAWAM,SAXA,0BAWAA,SAXA,EAWWC,QAXX,0BAWWA,QAXX;AAYTC,cAAAA,MAZS,GAYAR,KAAK,CAACQ,MAAN,IAAgB,EAZhB;AAcXP,cAAAA,QAdW,GAcArB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAd5B;AAeXK,cAAAA,OAfW,GAeD,EAfC;AAiBf7B,cAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAACO,aAA/E,EAA8FD,KAA9F,CAAoG,UAApG,EAAgHA,KAAhH,CAAsH,SAAtH,EACKG,EADL,CACQ,OADR,EACiB,UAAAC,QAAQ,EAAI;AAErBmB,gBAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAQ,CAACE,GAAT,EAAZ;AAEAX,gBAAAA,OAAO,GAAG,MAAKoB,eAAL,CAAqBX,QAArB,CAAV;;AAEA,sBAAKG,QAAL,CAAc;AACVyE,kBAAAA,UAAU,EAAErF;AADF,iBAAd;AAIP,eAXD;;AAjBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAhoBA;;AAAA,UAmqBnBsF,iBAnqBmB,GAmqBC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEhB,oBAAK1E,QAAL,CAAc;AAAEsD,gBAAAA,sBAAsB,EAAC;AAAzB,eAAd;;AACA,oBAAKtD,QAAL,CAAc;AAAEsE,gBAAAA,4BAA4B,EAAC;AAA/B,eAAd;;AACA,oBAAKtE,QAAL,CAAc;AAAEwE,gBAAAA,iBAAiB,EAAE;AAArB,eAAd;;AAJgB,wCAWuB,MAAKhG,KAAL,CAAWQ,UAXlC,EAWRL,KAXQ,2BAWRA,KAXQ,EAWDM,SAXC,2BAWDA,SAXC,EAWUC,QAXV,2BAWUA,QAXV;AAYVC,cAAAA,MAZU,GAYDR,KAAK,CAACQ,MAAN,IAAgB,EAZf;AAcZP,cAAAA,QAdY,GAcDrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAd3B;AAeZK,cAAAA,OAfY,GAeF,EAfE;AAiBhB7B,cAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EAAkDa,KAAlD,CAAwD,QAAxD,EAAkEA,KAAlE,CAAwEN,MAAM,CAACO,aAA/E,EAA8FD,KAA9F,CAAoG,WAApG,EAAiHA,KAAjH,CAAuH,SAAvH,EACKG,EADL,CACQ,OADR,EACiB,UAAAC,QAAQ,EAAI;AAErBmB,gBAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAQ,CAACE,GAAT,EAAZ;AAEAX,gBAAAA,OAAO,GAAG,MAAKoB,eAAL,CAAqBX,QAArB,CAAV;;AAIA,sBAAKG,QAAL,CAAc;AACVkB,kBAAAA,mBAAmB,EAAE9B;AADX,iBAAd;AAIP,eAbD;;AAjBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnqBD;;AAAA,UAusBnBuF,qBAvsBmB,GAusBK;AAAA;AAAA;AAAA;AAAA;AAEpB,oBAAK3E,QAAL,CAAc;AAACyB,gBAAAA,sBAAsB,EAAE;AAAzB,eAAd;;AACA,oBAAKzB,QAAL,CAAc;AAACsD,gBAAAA,sBAAsB,EAAC;AAAxB,eAAd;;AAGA,oBAAKtD,QAAL,CAAc;AAAC4E,gBAAAA,4CAA4C,EAAC;AAA9C,eAAd;;AANoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAvsBL;;AAEf,UAAKjG,KAAL,GAAa;AACTkG,MAAAA,QAAQ,EAAE,EADD;AAETd,MAAAA,SAAS,EAAE,EAFF;AAGTe,MAAAA,UAAU,EAAC,EAHF;AAITC,MAAAA,QAAQ,EAAE,KAJD;AAKTC,MAAAA,QAAQ,EAAE,EALD;AAMTC,MAAAA,QAAQ,EAAC,EANA;AAOTC,MAAAA,YAAY,EAAC,EAPJ;AAUTC,MAAAA,iBAAiB,EAAC,CAVT;AAWTC,MAAAA,gBAAgB,EAAC,CAXR;AAYTC,MAAAA,UAAU,EAAC,EAZF;AAaTC,MAAAA,qBAAqB,EAAC,EAbb;AAeThE,MAAAA,kBAAkB,EAAC,EAfV;AAgBTmB,MAAAA,uBAAuB,EAAC,EAhBf;AAkBTgC,MAAAA,UAAU,EAAC,EAlBF;AAmBTvD,MAAAA,mBAAmB,EAAC,EAnBX;AAoBTH,MAAAA,kBAAkB,EAAC,EApBV;AAqBT3B,MAAAA,OAAO,EAAC,EArBC;AAsBTC,MAAAA,gBAAgB,EAAC,EAtBR;AAuBTwB,MAAAA,eAAe,EAAC,EAvBP;AA2BTnC,MAAAA,cAAc,EAAE,CA3BP;AA4BT6G,MAAAA,eAAe,EAAC,CA5BP;AA6BTC,MAAAA,eAAe,EAAE,CA7BR;AA8BTrF,MAAAA,cAAc,EAAC,CA9BN;AA+BTC,MAAAA,sBAAsB,EAAC,CA/Bd;AAiCTC,MAAAA,uBAAuB,EAAC,CAjCf;AAkCToF,MAAAA,wBAAwB,EAAC,CAlChB;AAmCTnF,MAAAA,uBAAuB,EAAE,CAnChB;AAoCTC,MAAAA,+BAA+B,EAAC,CApCvB;AAqCTmF,MAAAA,wBAAwB,EAAE,CArCjB;AAuCThG,MAAAA,aAAa,EAAC,EAvCL;AAwCTC,MAAAA,cAAc,EAAE,EAxCP;AA2CTiD,MAAAA,uBAAuB,EAAC,EA3Cf;AA4CT+C,MAAAA,uBAAuB,EAAE,KA5ChB;AA6CTC,MAAAA,wBAAwB,EAAC,KA7ChB;AAgDTrE,MAAAA,sBAAsB,EAAE,EAhDf;AAiDTsE,MAAAA,uBAAuB,EAAC,EAjDf;AAmDTpF,MAAAA,mBAAmB,EAAC,EAnDX;AAoDTC,MAAAA,4BAA4B,EAAC,EApDpB;AAuDToF,MAAAA,iCAAiC,EAAC,KAvDzB;AAwDTC,MAAAA,sCAAsC,EAAC,KAxD9B;AA4DTnC,MAAAA,+BAA+B,EAAE,KA5DxB;AA6DToC,MAAAA,0CAA0C,EAAC,KA7DlC;AAgET1C,MAAAA,sBAAsB,EAAC,IAhEd;AAiET7B,MAAAA,sBAAsB,EAAC,KAjEd;AAkET8C,MAAAA,2BAA2B,EAAC,KAlEnB;AAmETD,MAAAA,4BAA4B,EAAC,KAnEpB;AAoET5C,MAAAA,0BAA0B,EAAC,KApElB;AAuETS,MAAAA,eAAe,EAAE,CAvER;AAwETC,MAAAA,UAAU,EAAC,EAxEF;AAyETC,MAAAA,cAAc,EAAC,EAzEN;AA0ETL,MAAAA,KAAK,EAAC,CA1EG;AA2ETC,MAAAA,MAAM,EAAC,CA3EE;AA4ETC,MAAAA,MAAM,EAAC,CA5EE;AA6ETI,MAAAA,KAAK,EAAC,CA7EG;AA8ETC,MAAAA,aAAa,EAAC;AA9EL,KAAb;AAFe;AAmFlB;;;;WAED,6BAAmB;AAAA;;AAAA,oCAGwB,KAAK/D,KAAL,CAAWQ,UAHnC;AAAA,UAGPL,KAHO,2BAGPA,KAHO;AAAA,UAGAM,SAHA,2BAGAA,SAHA;AAAA,UAGWC,QAHX,2BAGWA,QAHX;AAIf,UAAMC,MAAM,GAAGR,KAAK,CAACQ,MAAN,IAAgB,EAA/B;AAGA,WAAKa,QAAL,CAAc;AAACN,QAAAA,aAAa,EAAEP,MAAM,CAACO;AAAvB,OAAd;AAGA,WAAKM,QAAL,CAAc;AAACL,QAAAA,cAAc,EAAER,MAAM,CAACQ;AAAxB,OAAd;AAGA,UAAIf,QAAQ,GAAGrB,QAAQ,CAACsB,IAAT,GAAgBC,WAAhB,CAA4BC,GAA3C;AACA,UAAIW,aAAa,GAAG,KAAKf,KAAL,CAAWe,aAA/B;AACA,UAAI4F,qBAAqB,GAAG,KAAK3G,KAAL,CAAW2G,qBAAvC;AAIA/H,MAAAA,QAAQ,CAACgC,QAAT,GAAoBC,GAApB,CAAwB,QAAxB,EAAkCC,KAAlC,CAAwCb,QAAxC,EACCgB,EADD,CACI,OADJ,EACa,UAAAC,QAAQ,EAAI;AACrB,YAAMoG,OAAO,GAAGpG,QAAQ,CAACE,GAAT,EAAhB;AAEA,YAAIgE,SAAS,GAAGkC,OAAO,CAAClC,SAAxB;;AACA,QAAA,MAAI,CAAC/D,QAAL,CAAc;AAAC+D,UAAAA,SAAS,EAACA;AAAX,SAAd;;AAEA,YAAIc,QAAQ,GAAGoB,OAAO,CAACpB,QAAvB;;AACA,QAAA,MAAI,CAAC7E,QAAL,CAAc;AAAC6E,UAAAA,QAAQ,EAACA;AAAV,SAAd;AAEH,OAVD;AAYI,WAAKpG,cAAL;AAEH;;;WA86BD,kBAAQ;AAAA;;AAEJ,UAAI4E,eAAJ;AACA,UAAIjC,iBAAJ;AACA,UAAI8E,eAAJ;AACA,UAAIC,UAAJ;AACA,UAAIC,WAAJ;AAEA,UAAIC,cAAJ;AAEA,UAAItC,SAAS,GAAG,KAAKpF,KAAL,CAAWoF,SAA3B;AAyBA,UAAIT,sBAAsB,GAAG,KAAK3E,KAAL,CAAW2E,sBAAxC;AACA,UAAI7B,sBAAsB,GAAG,KAAK9C,KAAL,CAAW8C,sBAAxC;AAGA,UAAI+B,sCAAsC,GAAI,KAAK7E,KAAL,CAAW6E,sCAAzD;AACA,UAAIE,uCAAuC,GAAG,KAAK/E,KAAL,CAAW+E,uCAAzD;AAGA,UAAIkB,4CAA4C,GAAG,KAAKjG,KAAL,CAAWiG,4CAA9D;AACA,UAAI0B,kDAAkD,GAAG,KAAK3H,KAAL,CAAW2H,kDAApE;AAGA,UAAI1C,+BAA+B,GAAG,KAAKjF,KAAL,CAAWiF,+BAAjD;AACA,UAAII,gCAAgC,GAAG,KAAKrF,KAAL,CAAWqF,gCAAlD;;AAGQ,UAAGV,sBAAsB,IAAI,IAA7B,EACA;AACI4C,QAAAA,eAAe,GACX,oBAAC,UAAD;AAAY,UAAA,KAAK,EAAEK,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAED,cAAc,CAACE,MAAxC;AAAgD,UAAA,OAAO,EAAI,KAAKpD,eAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEkD,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,CAFJ,EAMI,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEH,cAAc,CAACE,MAAxC;AAAgD,UAAA,OAAO,EAAI,KAAK9B,qBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE4B,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CADJ,CANJ,CADJ;AAgBH;;AAID,UAAGjF,sBAAsB,IAAI,IAA7B,EACA;AAEI,YAAGsC,SAAS,IAAI,KAAhB,EACA;AAEIV,UAAAA,eAAe,GAEX,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAEkD,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAED,cAAc,CAACI,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEJ,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAmC,KAAK/H,KAAL,CAAWkG,QAA9C,CADJ,CADJ,EAKI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE0B,cAAc,CAACK,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEL,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAWD,cAAtD,CADJ,EAEI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE6H,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA4C,KAAK/H,KAAL,CAAW4G,eAAvD,CAFJ,EAGI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEgB,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAWwB,cAAtD,CAHJ,EAII,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEoG,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAqD,KAAK/H,KAAL,CAAWyB,sBAAhE,CAJJ,CALJ,EAYI,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEmG,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAKlD,gBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEgD,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAA+D,KAAK/H,KAAL,CAAWkG,QAA1E,MADJ,CAZJ,EAiBI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE0B,cAAc,CAACI,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEJ,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAjBJ,EAqBI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEH,cAAc,CAACK,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEL,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAW0B,uBAAtD,CADJ,EAEI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEkG,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA4C,KAAK/H,KAAL,CAAW8G,wBAAvD,CAFJ,EAGI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEc,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAW2B,uBAAtD,CAHJ,EAII,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEiG,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAqD,KAAK/H,KAAL,CAAW4B,+BAAhE,CAJJ,CArBJ,EA4BI,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEgG,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAKhD,qBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE8C,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEADJ,CA5BJ,CAFJ;AAsCH,SAzCD,MA0CK,IAAG3C,SAAS,IAAI,QAAhB,EACL;AAEIV,UAAAA,eAAe,GAEX,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAEkD,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAED,cAAc,CAACI,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEJ,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAmC,KAAK/H,KAAL,CAAWkG,QAA9C,CADJ,CADJ,EAKI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE0B,cAAc,CAACK,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEL,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAWD,cAAtD,CADJ,EAEI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE6H,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAWwB,cAAtD,CAFJ,EAGI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEoG,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAqD,KAAK/H,KAAL,CAAWyB,sBAAhE,CAHJ,CALJ,EAWI,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEmG,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAKlD,gBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEgD,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAA+D,KAAK/H,KAAL,CAAWkG,QAA1E,MADJ,CAXJ,EAgBI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE0B,cAAc,CAACI,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEJ,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAhBJ,EAoBI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEH,cAAc,CAACK,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEL,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAW0B,uBAAtD,CADJ,EAEI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEkG,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA2C,KAAK/H,KAAL,CAAW2B,uBAAtD,CAFJ,EAGI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEiG,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAqD,KAAK/H,KAAL,CAAW4B,+BAAhE,CAHJ,CApBJ,EA0BI,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEgG,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAKhD,qBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE8C,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEADJ,CA1BJ,CAFJ;AAmCH;AAEJ;;AAGD,UAAGlD,sCAAH,EACA;AAEI,YAAGO,SAAS,IAAI,KAAhB,EACA;AAEI3C,UAAAA,iBAAiB,GAEb,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAEmF,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEQ,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAED,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAFR,EAIQ,oBAAC,MAAD;AACI,YAAA,aAAa,EAAE,KAAK/H,KAAL,CAAW4C,sBAD9B;AAEI,YAAA,KAAK,EAAEgF,cAAc,CAACM,KAF1B;AAGI,YAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,qBAAU,MAAI,CAAC9G,QAAL,CAAc;AAACuB,gBAAAA,sBAAsB,EAACuF;AAAxB,eAAd,CAAV;AAAA,aAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAMI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,gBAAnB;AAAoC,YAAA,KAAK,EAAC,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,EAOI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,EAQI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,OAAnB;AAA2B,YAAA,KAAK,EAAC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,EASI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,CAJR,EAkBQ,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEP,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAK9C,4BAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE4C,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,CAlBR,CAFJ;AA2BH,SA9BD,MA+BK,IAAG3C,SAAS,IAAI,QAAhB,EACL;AACI3C,UAAAA,iBAAiB,GAEb,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAEmF,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEQ,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAED,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAFR,EAIQ,oBAAC,MAAD;AACI,YAAA,aAAa,EAAE,KAAK/H,KAAL,CAAW4C,sBAD9B;AAEI,YAAA,KAAK,EAAEgF,cAAc,CAACM,KAF1B;AAGI,YAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,qBAAU,MAAI,CAAC9G,QAAL,CAAc;AAACuB,gBAAAA,sBAAsB,EAACuF;AAAxB,eAAd,CAAV;AAAA,aAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAMI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,gBAAnB;AAAoC,YAAA,KAAK,EAAC,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,EAOI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,EAQI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,CAJR,EAiBQ,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEP,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAK9C,4BAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE4C,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,CAjBR,CAFJ;AAyBH;AACJ;;AAED,UAAGhD,uCAAH,EACA;AAEI,YAAGK,SAAS,IAAI,KAAhB,EACA;AAEI3C,UAAAA,iBAAiB,GAEb,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAEmF,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAED,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAFJ,EAIQ,oBAAC,MAAD;AACI,YAAA,aAAa,EAAE,KAAK/H,KAAL,CAAWkH,uBAD9B;AAEI,YAAA,KAAK,EAAEU,cAAc,CAACM,KAF1B;AAGI,YAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,qBAAU,MAAI,CAAC9G,QAAL,CAAc;AAAC6F,gBAAAA,uBAAuB,EAACiB;AAAzB,eAAd,CAAV;AAAA,aAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAMI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,gBAAnB;AAAoC,YAAA,KAAK,EAAC,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,EAOI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,EAQI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,OAAnB;AAA2B,YAAA,KAAK,EAAC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,EASI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,CAJR,EAkBY,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEP,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAK5C,mCAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE0C,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CAlBZ,CAFJ;AA0BH,SA7BD,MA8BK,IAAG3C,SAAS,IAAI,QAAhB,EACL;AAEI3C,UAAAA,iBAAiB,GAEb,oBAAC,UAAD;AAAY,YAAA,KAAK,EAAEmF,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAED,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFJ,EAIQ,oBAAC,MAAD;AACI,YAAA,aAAa,EAAE,KAAK/H,KAAL,CAAWkH,uBAD9B;AAEI,YAAA,KAAK,EAAEU,cAAc,CAACM,KAF1B;AAGI,YAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,qBAAU,MAAI,CAAC9G,QAAL,CAAc;AAAC6F,gBAAAA,uBAAuB,EAACiB;AAAzB,eAAd,CAAV;AAAA,aAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAMI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,gBAAnB;AAAoC,YAAA,KAAK,EAAC,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,EAOI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,EAQI,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAC,MAAnB;AAA0B,YAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,CAJR,EAiBY,oBAAC,gBAAD;AAAkB,YAAA,KAAK,EAAEP,cAAc,CAACE,MAAxC;AAAgD,YAAA,OAAO,EAAI,KAAK5C,mCAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAE0C,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CAjBZ,CAFJ;AAyBH;AACJ;;AAKJ,UAAG9B,4CAA4C,IAAI,IAAnD,EACA;AAEOxD,QAAAA,iBAAiB,GAEb,oBAAC,UAAD;AAAY,UAAA,KAAK,EAAEmF,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAED,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFJ,EAII,oBAAC,MAAD;AACI,UAAA,aAAa,EAAE,KAAK/H,KAAL,CAAW2C,kBAD9B;AAEI,UAAA,KAAK,EAAEiF,cAAc,CAACM,KAF1B;AAGI,UAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,mBAAU,MAAI,CAAC9G,QAAL,CAAc;AAACsB,cAAAA,kBAAkB,EAACwF;AAApB,aAAd,CAAV;AAAA,WAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMA,oBAAC,MAAD,CAAQ,IAAR;AAAa,UAAA,KAAK,EAAC,iBAAnB;AAAqC,UAAA,KAAK,EAAC,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANA,EAOK,KAAKnI,KAAL,CAAW8F,UAAX,CAAsBsC,GAAtB,CAA0B,UAAC3C,IAAD,EAAO4C,KAAP,EAAiB;AACxC,iBAEQ,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAE5C,IAAI,CAAChC,UAAzB;AAAqC,YAAA,KAAK,EAAEgC,IAAI,CAAC6C,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFR;AAMH,SAPA,CAPL,CAJJ,EAsBI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEV,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAtBJ,EAwBI,oBAAC,MAAD;AACI,UAAA,aAAa,EAAE,KAAK/H,KAAL,CAAW4C,sBAD9B;AAEI,UAAA,KAAK,EAAEgF,cAAc,CAACM,KAF1B;AAGI,UAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,mBAAU,MAAI,CAAC9G,QAAL,CAAc;AAACuB,cAAAA,sBAAsB,EAACuF;AAAxB,aAAd,CAAV;AAAA,WAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMQ,oBAAC,MAAD,CAAQ,IAAR;AAAa,UAAA,KAAK,EAAC,gBAAnB;AAAoC,UAAA,KAAK,EAAC,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANR,EAOQ,oBAAC,MAAD,CAAQ,IAAR;AAAa,UAAA,KAAK,EAAC,MAAnB;AAA0B,UAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPR,EAQQ,oBAAC,MAAD,CAAQ,IAAR;AAAa,UAAA,KAAK,EAAC,MAAnB;AAA0B,UAAA,KAAK,EAAC,MAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UARR,CAxBJ,EAqCI,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEP,cAAc,CAACE,MAAxC;AAAgD,UAAA,OAAO,EAAI,KAAKrF,iBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAEmF,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,CArCJ,EA0CI,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEH,cAAc,CAACE,MAAxC;AAAgD,UAAA,OAAO,EAAI,KAAK9D,+BAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE4D,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDADJ,CA1CJ,CAFJ;AAuDN;;AAED,UAAGJ,kDAAkD,IAAI,IAAzD,EACA;AAEIlF,QAAAA,iBAAiB,GAEb,oBAAC,UAAD;AAAY,UAAA,KAAK,EAAEmF,cAAc,CAACC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAED,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAFJ,EAII,oBAAC,MAAD;AACI,UAAA,aAAa,EAAE,KAAK/H,KAAL,CAAW8D,uBAD9B;AAEI,UAAA,KAAK,EAAE8D,cAAc,CAACM,KAF1B;AAGI,UAAA,aAAa,EAAE,uBAACC,IAAD;AAAA,mBAAU,MAAI,CAAC9G,QAAL,CAAc;AAACyC,cAAAA,uBAAuB,EAACqE;AAAzB,aAAd,CAAV;AAAA,WAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAMA,oBAAC,MAAD,CAAQ,IAAR;AAAa,UAAA,KAAK,EAAC,iBAAnB;AAAqC,UAAA,KAAK,EAAC,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANA,EAOK,KAAKnI,KAAL,CAAWuC,mBAAX,CAA+B6F,GAA/B,CAAmC,UAAC3C,IAAD,EAAO4C,KAAP,EAAiB;AACjD,iBAEQ,oBAAC,MAAD,CAAQ,IAAR;AAAa,YAAA,KAAK,EAAE5C,IAAI,CAAChC,UAAzB;AAAqC,YAAA,KAAK,EAAEgC,IAAI,CAAC6C,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFR;AAMH,SAPA,CAPL,CAJJ,EAsBI,oBAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEV,cAAc,CAACE,MAAxC;AAAgD,UAAA,OAAO,EAAI,KAAKjE,0BAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE+D,cAAc,CAACG,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CADJ,CAtBJ,CAFJ;AA+BH;;AAaF,UAAG9C,+BAA+B,IAAI,IAAtC,EACA;AAQI,YAAGG,SAAS,IAAI,KAAhB,EACA;AAEI,cAAGjG,WAAW,IAAI,KAAKa,KAAL,CAAWsB,2BAA1B,IAAyD/B,YAAY,IAAI,KAAKS,KAAL,CAAWuB,4BAAvF,EACA;AAEQ,gBAAGpC,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AACIsD,cAAAA,KAAK,CAAC,8IAAD,CAAL;AAEA6E,cAAAA,cAAc,GAGV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGA,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACA,gBAAA,MAAM,EAAEC,OAAO,mBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA,EAMa,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CANb,CAFJ,CAHJ;AAyCH,aA7CD,MA+CA;AAEIpB,cAAAA,cAAc,GAGV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEY,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACA,gBAAA,MAAM,EAAEC,OAAO,mBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFZ,EAIa,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CAJb,CAFA,CAHJ;AA+BH;AAMR,WAzFD,MA4FA;AAII,gBAAG3J,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AAEIsD,cAAAA,KAAK,CAAC,8IAAD,CAAL;AAEA6E,cAAAA,cAAc,GAIV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGI,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACI,gBAAA,MAAM,EAAEC,OAAO,mBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAKS,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CALT,CAFJ,CAJJ;AA+BH;;AAEDpB,YAAAA,cAAc,GAIV,oBAAC,UAAD;AAAY,cAAA,UAAU,EAAE,IAAxB;AAA8B,cAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAGI,oBAAC,KAAD;AAAO,cAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACI,cAAA,MAAM,EAAEC,OAAO,mBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAKS,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,qBACA,oBAAC,IAAD;AACI,gBAAA,KAAK,EAAE;AACPoE,kBAAAA,QAAQ,EAAE,UADH;AAEPC,kBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,kBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,kBAAAA,eAAe,EAAC,SAJT;AAKPvJ,kBAAAA,KAAK,EAAE,EALA;AAMPE,kBAAAA,MAAM,EAAE,EAND;AAOPsJ,kBAAAA,YAAY,EAAE;AAPP,iBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA;AAcP,aAfI,CALT,CAFJ,CAJJ;AAgCH;AAEJ,SA3KD,MA4KK,IAAG1D,SAAS,IAAI,QAAhB,EACL;AAEQ,cAAGjG,WAAW,IAAI,KAAKa,KAAL,CAAWsB,2BAA1B,IAAyD/B,YAAY,IAAI,KAAKS,KAAL,CAAWuB,4BAAvF,EACA;AAEI,gBAAGpC,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AACIsD,cAAAA,KAAK,CAAC,8IAAD,CAAL;AAGA6E,cAAAA,cAAc,GACV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACQ,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAII,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACmB,iBAA9B;AACI,gBAAA,MAAM,EAAEN,OAAO,qBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAMS,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AAEPoE,oBAAAA,QAAQ,EAAE,UAFH;AAGPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAHJ;AAIPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAJH;AAKPqE,oBAAAA,eAAe,EAAC,SALT;AAMPvJ,oBAAAA,KAAK,EAAE,EANA;AAOPE,oBAAAA,MAAM,EAAE,EAPD;AAQPsJ,oBAAAA,YAAY,EAAE;AARP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAeC,eAhBJ,CANT,CADR,CADJ;AA8BH,aAnCD,MAqCA;AAIIpB,cAAAA,cAAc,GAEV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGA,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACoB,aAA9B;AACI,gBAAA,MAAM,EAAEP,OAAO,qBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA,EAKK,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CALL,CADJ,CAFJ;AA8BH;AAIJ,WA9ED,MAgFA;AAEI,gBAAG3J,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AACIsD,cAAAA,KAAK,CAAC,8IAAD,CAAL;AAGA6E,cAAAA,cAAc,GACV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAKA,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACmB,iBAA9B;AACgB,gBAAA,MAAM,EAAEN,OAAO,qBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALA,EAOiB,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AAEPoE,oBAAAA,QAAQ,EAAE,UAFH;AAGPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAHJ;AAIPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAJH;AAKPqE,oBAAAA,eAAe,EAAC,SALT;AAMPvJ,oBAAAA,KAAK,EAAE,EANA;AAOPE,oBAAAA,MAAM,EAAE,EAPD;AAQPsJ,oBAAAA,YAAY,EAAE;AARP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAeC,eAhBJ,CAPjB,CADA,CADJ;AAgCH;;AAGDpB,YAAAA,cAAc,GAGV,oBAAC,UAAD;AAAY,cAAA,UAAU,EAAE,IAAxB;AAA8B,cAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEQ,oBAAC,KAAD;AAAO,cAAA,KAAK,EAAGX,cAAc,CAACoB,aAA9B;AACI,cAAA,MAAM,EAAEP,OAAO,qBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR,EAIa,KAAKzI,KAAL,CAAW8B,mBAAX,CAA+BsG,GAA/B,CAAmC,UAAC9D,IAAD,EAAU;AAC1C,qBACA,oBAAC,IAAD;AACI,gBAAA,KAAK,EAAE;AACPoE,kBAAAA,QAAQ,EAAE,UADH;AAEPC,kBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,kBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,kBAAAA,eAAe,EAAC,SAJT;AAKPvJ,kBAAAA,KAAK,EAAE,EALA;AAMPE,kBAAAA,MAAM,EAAE,EAND;AAOPsJ,kBAAAA,YAAY,EAAE;AAPP,iBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA;AAcP,aAfI,CAJb,CADA,CAHJ;AA8BH;AAIR;AAEJ;;AAED,UAAGzD,gCAAgC,IAAI,IAAvC,EACA;AAWgB,YAAGD,SAAS,IAAI,KAAhB,EACA;AAEI,cAAGjG,WAAW,IAAI,KAAKa,KAAL,CAAWsB,2BAA1B,IAAyD/B,YAAY,IAAI,KAAKS,KAAL,CAAWuB,4BAAvF,EACA;AAEQ,gBAAGpC,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AACIsD,cAAAA,KAAK,CAAC,8IAAD,CAAL;AAEA6E,cAAAA,cAAc,GAGV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGA,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACA,gBAAA,MAAM,EAAEC,OAAO,mBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA,EAMa,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CANb,CAFJ,CAHJ;AAyCH,aA7CD,MA+CA;AAEIpB,cAAAA,cAAc,GAGV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEY,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACA,gBAAA,MAAM,EAAEC,OAAO,mBADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFZ,EAIa,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CAJb,CAFA,CAHJ;AA+BH;AAMR,WAzFD,MA4FA;AAII,gBAAG3J,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AAEIsD,cAAAA,KAAK,CAAC,8IAAD,CAAL;AAEA6E,cAAAA,cAAc,GAIV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGI,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACI,gBAAA,MAAM,EAAEC,OAAO,mBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,EAKS,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CALT,CAFJ,CAJJ;AA+BH;;AAEDpB,YAAAA,cAAc,GAIV,oBAAC,UAAD;AAAY,cAAA,UAAU,EAAE,IAAxB;AAA8B,cAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAGI,oBAAC,KAAD;AAAO,cAAA,KAAK,EAAGX,cAAc,CAACY,UAA9B;AACI,cAAA,MAAM,EAAEC,OAAO,mBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAKS,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,qBACA,oBAAC,IAAD;AACI,gBAAA,KAAK,EAAE;AACPoE,kBAAAA,QAAQ,EAAE,UADH;AAEPC,kBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,kBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,kBAAAA,eAAe,EAAC,SAJT;AAKPvJ,kBAAAA,KAAK,EAAE,EALA;AAMPE,kBAAAA,MAAM,EAAE,EAND;AAOPsJ,kBAAAA,YAAY,EAAE;AAPP,iBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA;AAcP,aAfI,CALT,CAFJ,CAJJ;AAgCH;AAEJ,SA3KD,MA4KK,IAAG1D,SAAS,IAAI,QAAhB,EACL;AAEQ,cAAGjG,WAAW,IAAI,KAAKa,KAAL,CAAWsB,2BAA1B,IAAyD/B,YAAY,IAAI,KAAKS,KAAL,CAAWuB,4BAAvF,EACA;AAEI,gBAAGpC,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AACIsD,cAAAA,KAAK,CAAC,8IAAD,CAAL;AAGA6E,cAAAA,cAAc,GACV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACQ,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAII,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACmB,iBAA9B;AACI,gBAAA,MAAM,EAAEN,OAAO,qBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAMS,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AAEPoE,oBAAAA,QAAQ,EAAE,UAFH;AAGPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAHJ;AAIPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAJH;AAKPqE,oBAAAA,eAAe,EAAC,SALT;AAMPvJ,oBAAAA,KAAK,EAAE,EANA;AAOPE,oBAAAA,MAAM,EAAE,EAPD;AAQPsJ,oBAAAA,YAAY,EAAE;AARP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAeC,eAhBJ,CANT,CADR,CADJ;AA8BH,aAnCD,MAqCA;AAIIpB,cAAAA,cAAc,GAEV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAGA,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACoB,aAA9B;AACI,gBAAA,MAAM,EAAEP,OAAO,qBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHA,EAKK,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AACPoE,oBAAAA,QAAQ,EAAE,UADH;AAEPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,oBAAAA,eAAe,EAAC,SAJT;AAKPvJ,oBAAAA,KAAK,EAAE,EALA;AAMPE,oBAAAA,MAAM,EAAE,EAND;AAOPsJ,oBAAAA,YAAY,EAAE;AAPP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAcP,eAfI,CALL,CADJ,CAFJ;AA8BH;AAIJ,WA9ED,MAgFA;AAEI,gBAAG3J,WAAW,GAAG,GAAd,IAAqBI,YAAY,GAAG,GAAvC,EACA;AACIsD,cAAAA,KAAK,CAAC,+IAAD,CAAL;AAGA6E,cAAAA,cAAc,GACV,oBAAC,UAAD;AAAY,gBAAA,UAAU,EAAE,IAAxB;AAA8B,gBAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAKA,oBAAC,KAAD;AAAO,gBAAA,KAAK,EAAGX,cAAc,CAACmB,iBAA9B;AACgB,gBAAA,MAAM,EAAEN,OAAO,qBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALA,EAOiB,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,uBACA,oBAAC,IAAD;AACI,kBAAA,KAAK,EAAE;AAEPoE,oBAAAA,QAAQ,EAAE,UAFH;AAGPC,oBAAAA,IAAI,EAAErE,IAAI,CAACC,CAHJ;AAIPqE,oBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAJH;AAKPqE,oBAAAA,eAAe,EAAC,SALT;AAMPvJ,oBAAAA,KAAK,EAAE,EANA;AAOPE,oBAAAA,MAAM,EAAE,EAPD;AAQPsJ,oBAAAA,YAAY,EAAE;AARP,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAeC,eAhBJ,CAPjB,CADA,CADJ;AAgCH;;AAGDpB,YAAAA,cAAc,GAGV,oBAAC,UAAD;AAAY,cAAA,UAAU,EAAE,IAAxB;AAA8B,cAAA,KAAK,EAAEE,cAAc,CAACW,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAEQ,oBAAC,KAAD;AAAO,cAAA,KAAK,EAAGX,cAAc,CAACoB,aAA9B;AACI,cAAA,MAAM,EAAEP,OAAO,qBADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR,EAIa,KAAKzI,KAAL,CAAW+B,4BAAX,CAAwCqG,GAAxC,CAA4C,UAAC9D,IAAD,EAAU;AACnD,qBACA,oBAAC,IAAD;AACI,gBAAA,KAAK,EAAE;AACPoE,kBAAAA,QAAQ,EAAE,UADH;AAEPC,kBAAAA,IAAI,EAAErE,IAAI,CAACC,CAFJ;AAGPqE,kBAAAA,GAAG,EAAEtE,IAAI,CAACE,CAHH;AAIPqE,kBAAAA,eAAe,EAAC,SAJT;AAKPvJ,kBAAAA,KAAK,EAAE,EALA;AAMPE,kBAAAA,MAAM,EAAE,EAND;AAOPsJ,kBAAAA,YAAY,EAAE;AAPP,iBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA;AAcP,aAfI,CAJb,CADA,CAHJ;AA8BH;AAIR;AAChB;;AAIL,aAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACG,UAAAA,IAAI,EAAE,CAAP;AAAUJ,UAAAA,eAAe,EAAE;AAA3B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACMtB,eADN,CAHR,EAMQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACMG,cADN,CANR,EASQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKhD,eADL,CATR,EAaQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKjC,iBADL,CAbR,EAiBQ,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACMgF,WADN,CAjBR,CAFJ;AA8BH;;;;EAvoEc9I,S;;AA2oEvB,IAAMiJ,cAAc,GAAEsB,UAAU,CAACC,MAAX,CAAkB;AACpCtB,EAAAA,SAAS,EAAE;AACPgB,IAAAA,eAAe,EAAE,SADV;AAEPO,IAAAA,SAAS,EAAE,EAFJ;AAGPC,IAAAA,YAAY,EAAE,CAHP;AAIPC,IAAAA,UAAU,EAAE,CAJL;AAKPC,IAAAA,WAAW,EAAE,CALN;AAMPC,IAAAA,WAAW,EAAE;AANN,GADyB;AAUpCzB,EAAAA,IAAI,EAAC;AACD0B,IAAAA,KAAK,EAAE,OADN;AAEDC,IAAAA,QAAQ,EAAC,EAFR;AAKDC,IAAAA,cAAc,EAAC;AALd,GAV+B;AAiBpC3B,EAAAA,eAAe,EAAC;AAEZa,IAAAA,eAAe,EAAE,SAFL;AAGZe,IAAAA,UAAU,EAAE,QAHA;AAIZC,IAAAA,WAAW,EAAE,CAJD;AAKZC,IAAAA,WAAW,EAAC,SALA;AAMXF,IAAAA,UAAU,EAAE,QAND;AAOZtK,IAAAA,KAAK,EAAEP,EAAE,CAAC,KAAD,CAPG;AAQZqK,IAAAA,SAAS,EAAC,EARE;AASZW,IAAAA,OAAO,EAAC;AATI,GAjBoB;AA6BpC9B,EAAAA,OAAO,EAAE;AACLgB,IAAAA,IAAI,EAAC,CADA;AAGLW,IAAAA,UAAU,EAAE,QAHP;AAILP,IAAAA,YAAY,EAAC,EAJR;AAKLQ,IAAAA,WAAW,EAAE,CALR;AAMLC,IAAAA,WAAW,EAAC;AANP,GA7B2B;AAuCpCE,EAAAA,aAAa,EAAE;AACXnB,IAAAA,eAAe,EAAE,SADN;AAEXe,IAAAA,UAAU,EAAE;AAFD,GAvCqB;AA4CpCK,EAAAA,UAAU,EAAE;AACRpB,IAAAA,eAAe,EAAE,SADT;AAERe,IAAAA,UAAU,EAAE;AAFJ,GA5CwB;AAgDpC1B,EAAAA,KAAK,EAAE;AACH1I,IAAAA,MAAM,EAAE,EADL;AAEHsJ,IAAAA,YAAY,EAAE,CAFX;AAGHoB,IAAAA,QAAQ,EAAE,QAHP;AAIHrB,IAAAA,eAAe,EAAE,OAJd;AAKHO,IAAAA,SAAS,EAAE,EALR;AAMHC,IAAAA,YAAY,EAAE,EANX;AAOHC,IAAAA,UAAU,EAAE,EAPT;AAQHC,IAAAA,WAAW,EAAE,EARV;AASHC,IAAAA,WAAW,EAAE;AATV,GAhD6B;AA2DpC1B,EAAAA,MAAM,EAAE;AACJe,IAAAA,eAAe,EAAE,SADb;AAEJS,IAAAA,UAAU,EAAE,EAFR;AAGJC,IAAAA,WAAW,EAAE,EAHT;AAIJH,IAAAA,SAAS,EAAE,EAJP;AAKJ5J,IAAAA,MAAM,EAAE,EALJ;AAMJsJ,IAAAA,YAAY,EAAE,CANV;AAOJc,IAAAA,UAAU,EAAE,QAPR;AAQJD,IAAAA,cAAc,EAAE;AARZ,GA3D4B;AAuEpCnB,EAAAA,UAAU,EAAC;AAEPhJ,IAAAA,MAAM,EAAC,GAFA;AAGPF,IAAAA,KAAK,EAAC;AAHC,GAvEyB;AA+EnC6K,EAAAA,gBAAgB,EAAC;AAEd3K,IAAAA,MAAM,EAAC,GAFO;AAGdF,IAAAA,KAAK,EAAC;AAHQ,GA/EkB;AAyFnC0J,EAAAA,aAAa,EAAC;AACXxJ,IAAAA,MAAM,EAAC,GADI;AAEXF,IAAAA,KAAK,EAAE;AAFI,GAzFqB;AAkGxCyJ,EAAAA,iBAAiB,EACjB;AAGSvJ,IAAAA,MAAM,EAAC,GAHhB;AAISF,IAAAA,KAAK,EAAE;AAJhB,GAnGwC;AA4GpCiJ,EAAAA,kBAAkB,EAAE,EA5GgB;AA0HpC6B,EAAAA,QAAQ,EAAC;AACL9K,IAAAA,KAAK,EAAEG,GAAG,CAACH,KADN;AAELE,IAAAA,MAAM,EAAE,MAAME;AAFT,GA1H2B;AAgIpC2K,EAAAA,WAAW,EAAC;AACR/K,IAAAA,KAAK,EAAEG,GAAG,CAACH,KADH;AAERE,IAAAA,MAAM,EAAE,MAAMG,eAFN;AAGRiJ,IAAAA,GAAG,EAAE;AAHG;AAhIwB,CAAlB,CAAtB;AA2IA,eAAehJ,QAAf","sourcesContent":["import React, { useEffect, useState , Component  } from 'react'\r\nimport {ImageBackground, Dimensions,StatusBar,FlatList, Keyboard,  StyleSheet, Image, Text, View , ScrollView, TouchableOpacity,TextInput , Button , Alert} from 'react-native'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\nimport { ThemeColors } from 'react-navigation';\r\n\r\nimport {widthPercentageToDP as wp, heightPercentageToDP as hp} from 'react-native-responsive-screen';\r\n\r\n\r\nimport {Picker} from '@react-native-community/picker';\r\n\r\nconst screenWidth = Dimensions.get('window').width;\r\n\r\nconst screenHeight = Dimensions.get('window').height;\r\n\r\n\r\nconst win = Dimensions.get('window');\r\n\r\n\r\nconst ratioGaaView = win.width/590;\r\n\r\n\r\nconst ratioSoccerView = win.width/700;\r\n\r\nclass ViewGame extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            TeamName: '',\r\n            SportType: '',\r\n            inviteCode:'',\r\n            hasATeam: false,\r\n            userType: [],\r\n            GameList:[],\r\n            GameViewList:[],\r\n\r\n\r\n            UsersScreenHeight:0,\r\n            UsersScreenWidth:0,\r\n            statRecord:'',\r\n            gameStatsRecordsArray:[],\r\n\r\n            selectedTeamPlayer:'',\r\n            selectedOpponentsPlayer:'',\r\n\r\n            PlayerData:[],\r\n            OpponentsPlayerData:[],\r\n            YourTeamPlayerData:[],\r\n            tempArr:[],\r\n            tempArrOpponents:[],\r\n            tempArrYourTeam:[],\r\n       \r\n       \r\n\r\n            totalTeamGoals: 0,\r\n            totalTeamPoints:0,\r\n            totalTeamPasses: 0,\r\n            totalTeamShots:0,\r\n            totalTeamShotsOnTarget:0,\r\n                     \r\n            totalOpponentsTeamGoals:0,\r\n            totalOpponentsTeamPoints:0,\r\n            totalOpponentsTeamShots: 0,\r\n            totalOpponentsTeamShotsOnTarget:0,\r\n            totalOpponentsTeamPasses: 0,\r\n\r\n            GameRecordKey:'',\r\n            StatsRecordKey: '',\r\n\r\n            //Detailed Analysis - Player Specific\r\n            tempEventFieldLocations:[],\r\n            YourTeamFieldEventsView: false,\r\n            OpponentsFieldEventsView:false,\r\n\r\n\r\n            YourTeamEventSelection: '',\r\n            OpponentsEventSelection:'',\r\n\r\n            EventFieldLocations:[],\r\n            OpponentsEventFieldLocations:[],\r\n\r\n            //Detailed Analysis - Tean event Specific\r\n            displayTeamSpecificEventSelection:false,\r\n            displayOpponentsSpecificEventSelection:false,\r\n\r\n        \r\n            //Field Location views - Overall Team/Opponent Team Events\r\n            YourTeamSpecificStatFieldEvents: false,\r\n            OpponentsSpecificStatFieldEventsSoccerView:false,\r\n\r\n            //frontend end toggles\r\n            displayReviewSelection:true,\r\n            displayReviewGameStats:false,\r\n            displayReviewYourTeamPlayer:false,\r\n            displayReviewOpponentsPlayer:false,\r\n            displaySelectedPlayerStats:false,\r\n\r\n            //Individual Player Stats\r\n            PlayerKitNumber: 0,\r\n            PlayerName:'',\r\n            PlayerPosition:'',\r\n            Goals:0,\r\n            Points:0,\r\n            Passes:0,\r\n            Shots:0,\r\n            ShotsOnTarget:0,\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        //Obtain SelectedStarting11 Array of players\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n        \r\n        // Firebase Key for the Game record\r\n        this.setState({GameRecordKey: params.GameRecordKey});\r\n\r\n        //Firebase Key for the Game Stats Record\r\n        this.setState({StatsRecordKey: params.StatsRecordKey});\r\n\r\n\r\n        var myUserId = firebase.auth().currentUser.uid;\r\n        var GameRecordKey = this.state.GameRecordKey;\r\n        var gameStatsRecordsArray = this.state.gameStatsRecordsArray;\r\n\r\n\r\n        // GET Team SportType\r\n        firebase.database().ref('/teams').child(myUserId)\r\n        .on('value', snapshot => {\r\n            const userObj = snapshot.val();\r\n\r\n            let SportType = userObj.SportType;\r\n            this.setState({SportType:SportType});\r\n\r\n            let TeamName = userObj.TeamName;\r\n            this.setState({TeamName:TeamName});\r\n\r\n        });\r\n\r\n            this.filterGameData();\r\n\r\n        }\r\n\r\n            \r\n \r\n  filterGameData = async() => {\r\n\r\n    var totalTeamGoals = this.state.totalTeamGoals;\r\n\r\n    var myUserId = firebase.auth().currentUser.uid;\r\n\r\n        //Obtain SelectedStarting11 Array of players\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n        \r\n\r\n        var tempArr = [];\r\n        var tempArrOpponents = [];\r\n        \r\n\r\n    //GET Game records and put them all into an array \r\n    var query = firebase.database().ref('/teams').child(myUserId).child('games').child(params.GameRecordKey).child('YourTeamStats').child(params.StatsRecordKey)\r\n    .on('value', snapshot => {\r\n   \r\n\r\n        const gameObj = snapshot.val();\r\n\r\n\r\n        let screenWidth = gameObj.screenWidth;\r\n        this.setState({StatsStoredUsingScreenWidth: screenWidth});\r\n\r\n        let screenHeight = gameObj.screenHeight;\r\n        this.setState({StatsStoredUsingScreenHeight: screenHeight});\r\n\r\n\r\n        let totalTeamGoals = gameObj.totalTeamGoals;\r\n        this.setState({totalTeamGoals: totalTeamGoals});\r\n\r\n        // let totalTeamPasses = gameObj.totalTeamPasses;\r\n        // this.setState({totalTeamPasses:totalTeamPasses});\r\n\r\n        let totalTeamShots = gameObj.totalTeamShots;\r\n        this.setState({totalTeamShots:totalTeamShots});\r\n\r\n        let totalTeamShotsOnTarget = gameObj.totalTeamShotsOnTarget;\r\n        this.setState({totalTeamShotsOnTarget:totalTeamShotsOnTarget});\r\n\r\n\r\n\r\n        let totalOpponentsTeamGoals = gameObj.totalOpponentsTeamGoals;\r\n        this.setState({totalOpponentsTeamGoals: totalOpponentsTeamGoals});\r\n\r\n        // let totalOpponentsTeamPasses = gameObj.totalOpponentsTeamPasses;\r\n        // this.setState({totalOpponentsTeamPasses:totalOpponentsTeamPasses});\r\n\r\n        let totalOpponentsTeamShots = gameObj.totalOpponentsTeamShots;\r\n        this.setState({totalOpponentsTeamShots:totalOpponentsTeamShots});\r\n\r\n        let totalOpponentsTeamShotsOnTarget = gameObj.totalOpponentsTeamShotsOnTarget;\r\n        this.setState({totalOpponentsTeamShotsOnTarget:totalOpponentsTeamShotsOnTarget});\r\n\r\n\r\n\r\n        });\r\n\r\n\r\n          //Get data from DB - Your Team Event Locations \r\n          firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('EventFieldPositions')\r\n          .on('value', snapshot => {\r\n    \r\n             tempArr = this.snapshotToArray(snapshot);\r\n\r\n              this.setState({\r\n                  EventFieldLocations: tempArr\r\n              });\r\n  \r\n       \r\n          });\r\n\r\n\r\n        \r\n\r\n        //Get data from DB  - Opponents Event Locations \r\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('OpponentsEventFieldPositions')\r\n        .on('value', snapshot => {\r\n\r\n            tempArrOpponents = this.snapshotToArray(snapshot);\r\n\r\n            this.setState({\r\n                OpponentsEventFieldLocations:  tempArrOpponents\r\n            });\r\n        });\r\n\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n    //Your Team - Player Lists\r\n    GetSelectedYourTeamPlayerStats = value => () => {\r\n\r\n        //Obtain Array of players\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n\r\n        var myUserId = firebase.auth().currentUser.uid;\r\n        var tempArrYourTeam = [];\r\n\r\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.key).child('YourTeam').child('players')\r\n            .on('value', snapshot => {\r\n              \r\n                tempArrYourTeam = this.snapshotToArray(snapshot);\r\n                this.setState({\r\n                    YourTeamPlayerData: tempArrYourTeam\r\n                });\r\n\r\n        });\r\n\r\n        console.log(this.state.OpponentsPlayerData);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n       \r\n     \r\n\r\n\r\n    //Opponents - Player Lists\r\n    GetSelectedOpponentsPlayerStats = value => () => {\r\n\r\n        //Obtain Array of players\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n\r\n        var myUserId = firebase.auth().currentUser.uid;\r\n        var tempArrOpponents = [];\r\n\r\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.key).child('Opponents').child('players')\r\n            .on('value', snapshot => {\r\n              \r\n                tempArrOpponents = this.snapshotToArray(snapshot);\r\n                this.setState({\r\n                    OpponentsPlayerData: tempArrOpponents\r\n                });\r\n\r\n        });\r\n\r\n        console.log(this.state.OpponentsPlayerData);\r\n\r\n\r\n\r\n    }\r\n\r\n    //GET a specifc YOUR TEAM player\r\n    ReviewPlayerStats = ( itemKey ) => {\r\n        \r\n        var selectedTeamPlayer = this.state.selectedTeamPlayer;\r\n        var YourTeamEventSelection = this.state.YourTeamEventSelection;\r\n\r\n        var myUserId = firebase.auth().currentUser.uid;\r\n\r\n\r\n       const { state, setParams, navigate } = this.props.navigation;\r\n       const params = state.params || {};\r\n       var tempArr = this.state.tempArr;\r\n\r\n        if(selectedTeamPlayer == '' )\r\n        {\r\n            return alert(\"Please select a player\");\r\n        }\r\n\r\n\r\n\r\n        else\r\n        {\r\n            this.setState({displayReviewGameStats: false});\r\n            this.setState({displaySelectedPlayerStats:true});\r\n            \r\n\r\n            //WE ARE HERE - finish orderby ID \r\n            firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('YourTeam').child('players').orderByChild(\"PlayerID\").equalTo(selectedTeamPlayer)\r\n            .on('value', snapshot => {\r\n\r\n                const playerObj = snapshot.val();\r\n\r\n\r\n     \r\n                tempArr = this.snapshotToArray(snapshot);\r\n         \r\n\r\n                for(var i = 0; i < tempArr.length; i++)\r\n                {\r\n                    \r\n                    let Goals = tempArr[i].Goals;\r\n                    this.setState({Goals:Goals});\r\n\r\n                    let Points = tempArr[i].Points;\r\n                    this.setState({Points:Points});\r\n                    \r\n                    let Passes = tempArr[i].Passes;\r\n                    this.setState({Passes:Passes});\r\n\r\n                    let PlayerKitNumber = tempArr[i].PlayerKitNumber;\r\n                    this.setState({PlayerKitNumber:PlayerKitNumber});\r\n\r\n                    let PlayerName = tempArr[i].PlayerName;\r\n                    this.setState({PlayerName:PlayerName});\r\n\r\n                    let PlayerPosition = tempArr[i].PlayerPosition;\r\n                    this.setState({PlayerPosition:PlayerPosition});\r\n\r\n                    let Shots = tempArr[i].Shots;\r\n                    this.setState({Shots:Shots});\r\n\r\n                    let ShotsOnTarget = tempArr[i].ShotsOnTarget;\r\n                    this.setState({ShotsOnTarget: ShotsOnTarget});\r\n\r\n                }\r\n            \r\n            \r\n        \r\n           \r\n            });\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n   \r\n\r\n    }\r\n\r\n\r\n    //GET a specific OPPONENTS player\r\n    ReviewOpponentsPlayerStats = ( itemKey ) => {\r\n\r\n    \r\n        var myUserId = firebase.auth().currentUser.uid;\r\n\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n        var tempArr = this.state.tempArr;\r\n             \r\n\r\n        var selectedOpponentsPlayer = this.state.selectedOpponentsPlayer;\r\n\r\n        if(selectedOpponentsPlayer == '' )\r\n        {\r\n            return alert(\"Please select a player\");\r\n        }\r\n        else\r\n        {\r\n            \r\n            this.setState({displayReviewGameStats: false});\r\n            this.setState({displayOpponentsSelectedPlayerStats:true});\r\n  \r\n         \r\n              firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('Opponents').child('players').orderByChild(\"PlayerID\").equalTo(selectedOpponentsPlayer)\r\n              .on('value', snapshot => {\r\n  \r\n                  const playerObj = snapshot.val();\r\n  \r\n                  tempArr = this.snapshotToArray(snapshot);\r\n           \r\n  \r\n                  for(var i = 0; i < tempArr.length; i++)\r\n                  {\r\n                      \r\n                      let Goals = tempArr[i].Goals;\r\n                      this.setState({Goals:Goals});\r\n  \r\n                      let Points = tempArr[i].Points;\r\n                      this.setState({Points:Points});\r\n                      \r\n                      let Passes = tempArr[i].Passes;\r\n                      this.setState({Passes:Passes});\r\n  \r\n                      let PlayerKitNumber = tempArr[i].PlayerKitNumber;\r\n                      this.setState({PlayerKitNumber:PlayerKitNumber});\r\n  \r\n                      let PlayerName = tempArr[i].PlayerName;\r\n                      this.setState({PlayerName:PlayerName});\r\n  \r\n                      let PlayerPosition = tempArr[i].PlayerPosition;\r\n                      this.setState({PlayerPosition:PlayerPosition});\r\n  \r\n                      let Shots = tempArr[i].Shots;\r\n                      this.setState({Shots:Shots});\r\n  \r\n                      let ShotsOnTarget = tempArr[i].ShotsOnTarget;\r\n                      this.setState({ShotsOnTarget: ShotsOnTarget});\r\n  \r\n                  }\r\n              \r\n                      \r\n              });\r\n  \r\n  \r\n  \r\n          }\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n    GetSpecificPlayerEventLocations = async() => {\r\n        \r\n    //Array to store event Locations\r\n    var EventFieldLocations = this.state.EventFieldLocations;   \r\n\r\n    var YourTeamEventSelection = this.state.YourTeamEventSelection;\r\n\r\n    var selectedTeamPlayer = this.state.selectedTeamPlayer;\r\n\r\n    var myUserId = firebase.auth().currentUser.uid;\r\n    var tempEventFieldLocations = this.state.tempEventFieldLocations;\r\n\r\n        //\r\n        if(selectedTeamPlayer != '')\r\n        {\r\n\r\n            if(YourTeamEventSelection == '')\r\n            {\r\n                return alert(\"Please select an event\");\r\n            }\r\n            else\r\n            {\r\n                //get Event locations using SelectedTeamPlayer + YourTeamEventSelection\r\n                const { state, setParams, navigate } = this.props.navigation;\r\n                const params = state.params || {};\r\n               \r\n                //empty tempEventFieldLocations as this is only a temp array\r\n                tempEventFieldLocations.splice(0,tempEventFieldLocations.length);\r\n        \r\n                //filter array to get the specific player and event locations\r\n                for (var i = 0; i < EventFieldLocations.length; i++) \r\n                {\r\n        \r\n\r\n                    //WE ARE HERE, need to rethink the frontend as in eventfieldlocation array it is tracked by USERID\r\n                   \r\n\r\n                    if(EventFieldLocations[i].EventType == YourTeamEventSelection && EventFieldLocations[i].UserID == PlayerIDSelected)\r\n                    {\r\n        \r\n                        var data = {\r\n                            x:EventFieldLocations[i].x, \r\n                            y:EventFieldLocations[i].y \r\n                        };\r\n        \r\n        \r\n                        //Push to new temp EventFieldLocations\r\n                        this.state.tempEventFieldLocations.push(data);\r\n        \r\n                    }\r\n                }\r\n        \r\n      \r\n                \r\n            }\r\n\r\n\r\n        }\r\n        else\r\n        {\r\n            return alert(\"Please select a player\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Toggles frontend - View overall game stats\r\n    ReviewGameStats = async() => { \r\n\r\n        this.setState({displayReviewSelection:false});\r\n\r\n        this.setState({ displayReviewGameStats: true});\r\n    }\r\n\r\n    //Toggles frontend - Event Selection will appear\r\n    TeamSpecificStat = async() => {\r\n    \r\n        this.setState({ SelectAnEvent_ReviewGameStats_YourTeam:true });\r\n\r\n        this.setState({ displayReviewSelection: false});\r\n\r\n        \r\n        this.setState({ displayReviewGameStats: false});\r\n\r\n\r\n\r\n    }\r\n\r\n    //Toggles frontend - Event Selection will appear\r\n    OpponentsSpecificStat = async() => {\r\n        \r\n        this.setState({ SelectAnEvent_ReviewGameStats_Opponents:true});\r\n\r\n        this.setState({ displayReviewGameStats: false});\r\n\r\n        this.setState({ displayReviewSelection: false});\r\n    }\r\n\r\n    ExecuteYourTeamEventAnaylsis = async() => {\r\n\r\n          //Users Event selection\r\n          var YourTeamEventSelection = this.state.YourTeamEventSelection;\r\n  \r\n          //Array to store event Locations\r\n          var EventFieldLocations = this.state.EventFieldLocations;\r\n  \r\n          var myUserId = firebase.auth().currentUser.uid;\r\n          var tempEventFieldLocations = this.state.tempEventFieldLocations;\r\n\r\n        \r\n          \r\n  \r\n          const { state, setParams, navigate } = this.props.navigation;\r\n          const params = state.params || {};\r\n         \r\n          //empty tempEventFieldLocations as this is only a temp array\r\n          tempEventFieldLocations.splice(0,tempEventFieldLocations.length);\r\n  \r\n          //filter array to get the specific player and event locations\r\n          for (var i = 0; i < EventFieldLocations.length; i++) \r\n          {\r\n  \r\n              if(EventFieldLocations[i].EventType == YourTeamEventSelection)\r\n              {\r\n  \r\n                  var data = {\r\n                      x:EventFieldLocations[i].x, \r\n                      y:EventFieldLocations[i].y \r\n                  };\r\n  \r\n  \r\n                  //Push to new temp EventFieldLocations\r\n                  this.state.tempEventFieldLocations.push(data);\r\n  \r\n              }\r\n          }\r\n  \r\n\r\n          this.setState({SelectAnEvent_ReviewGameStats_YourTeam:false});\r\n\r\n            //Make Field Image appear\r\n            this.setState({YourTeamSpecificStatFieldEvents:true});\r\n          \r\n        \r\n    }\r\n\r\n    ExecuteOpponentsPlayerEventAnaylsis = async() => {\r\n\r\n        //Users Event selection\r\n        var OpponentEventSelection = this.state.OpponentEventSelection;\r\n        \r\n        //Array to store event Locations\r\n        var OpponentsEventFieldLocations = this.state.OpponentsEventFieldLocations;\r\n\r\n        var myUserId = firebase.auth().currentUser.uid;\r\n        var tempEventFieldLocations = this.state.tempEventFieldLocations;\r\n\r\n        var SportType = this.state.SportType;\r\n\r\n\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n\r\n        //empty tempEventFieldLocations as this is only a temp array\r\n        tempEventFieldLocations.splice(0,tempEventFieldLocations.length);\r\n\r\n        //filter array to get the specific player and event locations\r\n        for (var i = 0; i < OpponentsEventFieldLocations.length; i++) \r\n        {\r\n\r\n            if(OpponentsEventFieldLocations[i].EventType == OpponentEventSelection)\r\n            {\r\n\r\n                var data = {\r\n                    x:OpponentsEventFieldLocations[i].x, \r\n                    y:OpponentsEventFieldLocations[i].y \r\n                };\r\n\r\n\r\n                //Push to new temp EventFieldLocations\r\n                this.state.tempEventFieldLocations.push(data);\r\n\r\n            }\r\n        }\r\n\r\n\r\n        this.setState({SelectAnEvent_ReviewGameStats_Opponents:false});\r\n\r\n       \r\n        //Make Field Image appear\r\n        this.setState({OpponentsSpecificStatFieldEvents:true});\r\n        \r\n     \r\n    }\r\n\r\n    snapshotToArray = snapshot => {\r\n        var retArr = [];\r\n        snapshot.forEach(childSnapshot => {\r\n            var item = childSnapshot.val();\r\n            item.key = childSnapshot.key;\r\n            retArr.push(item);\r\n        });\r\n        return retArr;\r\n    }\r\n\r\n    //The users Team player selection will appear\r\n    YourTeamSelected = async() => {\r\n\r\n        this.setState({ displayReviewOpponentsPlayer:false });\r\n        this.setState({ displayReviewSelection:false});\r\n        this.setState({ displayReviewYourTeamPlayer:true });\r\n        this.setState({ displayTeamOption: false}); \r\n\r\n        \r\n    //Your Team - Player List\r\n\r\n        //Obtain SelectedStarting11 Array of players\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n\r\n        var myUserId = firebase.auth().currentUser.uid;\r\n        var tempArr = [];\r\n\r\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('YourTeam').child('players')\r\n            .on('value', snapshot => {\r\n\r\n                console.log(snapshot.val());\r\n              \r\n                tempArr = this.snapshotToArray(snapshot);\r\n\r\n                this.setState({\r\n                    PlayerData: tempArr\r\n                });\r\n\r\n        });\r\n\r\n\r\n    \r\n    }\r\n\r\n    //Opponents player selection will appear\r\n    OpponentsSelected = async() => {\r\n\r\n        this.setState({ displayReviewSelection:false});\r\n        this.setState({ displayReviewOpponentsPlayer:true });\r\n        this.setState({ displayTeamOption: false}); \r\n\r\n\r\n\r\n        //Your Team - Player List\r\n\r\n        //Obtain SelectedStarting11 Array of players\r\n        const { state, setParams, navigate } = this.props.navigation;\r\n        const params = state.params || {};\r\n\r\n        var myUserId = firebase.auth().currentUser.uid;\r\n        var tempArr = [];\r\n\r\n        firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('Opponents').child('players')\r\n            .on('value', snapshot => {\r\n\r\n                console.log(snapshot.val());\r\n              \r\n                tempArr = this.snapshotToArray(snapshot);\r\n\r\n\r\n                // console.log(this.snapshotToArray(snapshot));\r\n                this.setState({\r\n                    OpponentsPlayerData: tempArr\r\n                });\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n    // //This will trigger a selection on the frontend , where the user selects to review their Team players or the Opponents Players\r\n    SelectPlayerSelection = async() => {\r\n\r\n        this.setState({displayReviewGameStats: false});\r\n        this.setState({displayReviewSelection:false});\r\n        // this.setState({displayTeamOption:true});\r\n    \r\n        this.setState({SelectAnEvent_ReviewGameStats_YourTeamPlayer:true});\r\n\r\n    }\r\n\r\n    // PlayerEventSelection = async() => {\r\n\r\n    //     this.setState({displayEventSelection:true});\r\n    //     this.setState({displaySelectedPlayerStats:false});\r\n\r\n    // }   \r\n\r\n    // OpponentsEventSelection = async() => {\r\n\r\n    //     this.setState({displayOpponentsEventSelection:true});\r\n    //     this.setState({displayOpponentsSelectedPlayerStats:false});\r\n    // }\r\n\r\n\r\n    // ExecutePlayerEventAnaylsis = async() => {\r\n\r\n    //     //Users Player selection\r\n    //     var selectedTeamPlayer = this.state.selectedTeamPlayer;\r\n\r\n    //     //Users Event selection\r\n    //     var YourTeamEventSelection = this.state.YourTeamEventSelection;\r\n\r\n    //     //Array to store event Locations\r\n    //     var EventFieldLocations = this.state.EventFieldLocations;\r\n\r\n    //     var myUserId = firebase.auth().currentUser.uid;\r\n    //     var tempEventFieldLocations = this.state.tempEventFieldLocations;\r\n        \r\n\r\n    //      const { state, setParams, navigate } = this.props.navigation;\r\n    //      const params = state.params || {};\r\n\r\n    //     //GET Screen width and height that was used when taking stats (From Db)\r\n    //     var StatsStoredUsingScreenHeight = this.state.StatsStoredUsingScreenHeight;\r\n    //     var StatsStoredUsingScreenWidth = this.state.StatsStoredUsingScreenWidth;\r\n\r\n\r\n\r\n    //     //Check if the current user has the same device size (Screenwidth & Screenheight) \r\n    //     // if(StatsStoredUsingScreenHeight == screenHeight)\r\n    //     // {\r\n    //     //     if(StatsStoredUsingScreenWidth == screenWidth)\r\n    //     //     {\r\n            \r\n\r\n    //             //Display within App \r\n           \r\n           \r\n    //           // //empty tempEventFieldLocations as this is only a temp array\r\n    //             tempEventFieldLocations.splice(0,tempEventFieldLocations.length);\r\n\r\n    //             //filter array to get the specific player and event locations\r\n    //             for (var i = 0; i < EventFieldLocations.length; i++) \r\n    //             {\r\n        \r\n    //                 if(EventFieldLocations[i].UserID == selectedTeamPlayer && EventFieldLocations[i].EventType == YourTeamEventSelection)\r\n    //                 {\r\n        \r\n    //                     var data = {\r\n    //                         x:EventFieldLocations[i].x, \r\n    //                         y:EventFieldLocations[i].y \r\n    //                     };\r\n        \r\n        \r\n    //                     //Push to new temp EventFieldLocations\r\n    //                     this.state.tempEventFieldLocations.push(data);\r\n        \r\n    //                 }\r\n    //             }\r\n\r\n    //             console.log('TESTT');\r\n\r\n    //             //Make Field Image appear\r\n    //             this.setState({YourTeamFieldEventsView:true});\r\n\r\n    //             this.setState({displayReviewYourTeamPlayer:false});\r\n\r\n    //             this.setState({displaySelectedPlayerStats:false});\r\n \r\n \r\n           \r\n    //         }\r\n          \r\n    //  }\r\n        // else{\r\n        //     alert(\"EXPORT PDF - Please check the exported PDF \");\r\n\r\n            \r\n\r\n\r\n        //     //Logic to generate PDF with image and plots for this event\r\n        //             //Send Data to another PAGE/Component\r\n\r\n    \r\n     \r\n\r\n\r\n\r\n\r\n\r\n\r\n                        \r\n            \r\n        // }\r\n\r\n\r\n       \r\n        // //empty tempEventFieldLocations as this is only a temp array\r\n        // tempEventFieldLocations.splice(0,tempEventFieldLocations.length);\r\n\r\n        // //filter array to get the specific player and event locations\r\n        // for (var i = 0; i < EventFieldLocations.length; i++) \r\n        // {\r\n\r\n        //     if(EventFieldLocations[i].UserID == selectedTeamPlayer && EventFieldLocations[i].EventType == YourTeamEventSelection)\r\n        //     {\r\n\r\n        //         var data = {\r\n        //             x:EventFieldLocations[i].x, \r\n        //             y:EventFieldLocations[i].y \r\n        //         };\r\n\r\n\r\n        //         //Push to new temp EventFieldLocations\r\n        //         this.state.tempEventFieldLocations.push(data);\r\n\r\n        //     }\r\n        // }\r\n\r\n\r\n  \r\n\r\n        // //Test to see if correct data\r\n        // console.log(EventFieldLocations);\r\n \r\n        // //Make Field Image appear\r\n        // this.setState({YourTeamFieldEventsView:true});\r\n\r\n        // this.setState({displayReviewYourTeamPlayer:false});\r\n\r\n        // this.setState({displaySelectedPlayerStats:false});\r\n\r\n\r\n\r\n\r\n   // }\r\n\r\n    // ExecuteOpponentsPlayerEventAnaylsis = async() => {\r\n        \r\n    //     var myUserId = firebase.auth().currentUser.uid;\r\n\r\n    //     //Users Player selection\r\n    //     var selectedOpponentsPlayer = this.state.selectedOpponentsPlayer;\r\n\r\n    //     //Users Event selection\r\n    //     var OpponentsEventSelection = this.state.OpponentsEventSelection;\r\n\r\n    //     //Array to store event Locations\r\n    //     var OpponentsEventFieldLocations = this.state.OpponentsEventFieldLocations;\r\n\r\n\r\n    //     //Get data from DB \r\n    //     firebase.database().ref('/teams').child(myUserId).child('/games').child(params.GameRecordKey).child('OpponentsEventFieldPositions').orderByChild(\"UserID\").equalTo(selectedOpponentsPlayer)\r\n    //     .on('value', snapshot => {\r\n\r\n    //         tempArr = this.snapshotToArray(snapshot);\r\n\r\n    //         this.setState({\r\n    //             OpponentsEventFieldLocations: tempArr\r\n    //         });\r\n    //     });\r\n\r\n    //       //Test to see if correct data\r\n    //       console.log(OpponentsEventFieldLocations);\r\n \r\n    //       //Make Field Image appear\r\n    //       this.setState({OpponentsFieldEventsView:true});\r\n        \r\n    // }\r\n\r\n    // // ---------- TEAM STATS SELECTION AND FIELD PLOTTING ---------------\r\n    \r\n    // TeamSpecificStat  = async() => {\r\n\r\n    //     this.setState({displayTeamSpecificEventSelection:true});\r\n\r\n    //     this.setState({displayReviewSelection:false});\r\n    //     this.setState({displayReviewGameStats:false});\r\n\r\n    // }\r\n\r\n    // OpponentsSpecificStat = async() => {\r\n        \r\n    //     this.setState({displayOpponentsSpecificEventSelection:true});\r\n    \r\n    \r\n    //     this.setState({displayReviewSelection:false});\r\n    //     this.setState({displayReviewGameStats:false});\r\n    \r\n    // }\r\n    \r\n    // // ----------------------------------------------------------------------\r\n\r\n    // ExecuteTeamSpecificEventSelection = async() => {\r\n\r\n    //       //Users Event selection\r\n    //       var YourTeamEventSelection = this.state.YourTeamEventSelection;\r\n  \r\n    //       //Array to store event Locations\r\n    //       var EventFieldLocations = this.state.EventFieldLocations;\r\n  \r\n    //       var myUserId = firebase.auth().currentUser.uid;\r\n    //       var tempEventFieldLocations = this.state.tempEventFieldLocations;\r\n\r\n    //       var SportType = this.state.SportType;\r\n          \r\n  \r\n    //        const { state, setParams, navigate } = this.props.navigation;\r\n    //        const params = state.params || {};\r\n         \r\n    //       //empty tempEventFieldLocations as this is only a temp array\r\n    //       tempEventFieldLocations.splice(0,tempEventFieldLocations.length);\r\n  \r\n    //       //filter array to get the specific player and event locations\r\n    //       for (var i = 0; i < EventFieldLocations.length; i++) \r\n    //       {\r\n  \r\n    //           if(EventFieldLocations[i].EventType == YourTeamEventSelection)\r\n    //           {\r\n  \r\n    //               var data = {\r\n    //                   x:EventFieldLocations[i].x, \r\n    //                   y:EventFieldLocations[i].y \r\n    //               };\r\n  \r\n  \r\n    //               //Push to new temp EventFieldLocations\r\n    //               this.state.tempEventFieldLocations.push(data);\r\n  \r\n    //           }\r\n    //       }\r\n  \r\n  \r\n    \r\n  \r\n    //       //Test to see if correct data\r\n    //       console.log(EventFieldLocations);\r\n          \r\n\r\n    //       console.log('test 2');\r\n\r\n    //       this.setState({displayTeamSpecificEventSelection:false});\r\n\r\n    //       if(SportType == 'GAA')\r\n    //       {\r\n    //             //Make Field Image appear\r\n    //             this.setState({YourTeamSpecificStatFieldEvents:true});\r\n    //       }\r\n    //       else if (SportType == 'Soccer')\r\n    //       {\r\n    //             //Make Field Image appear\r\n    //             this.setState({YourTeamSpecificStatFieldEventsSoccerView:true});\r\n    //       }\r\n   \r\n   \r\n\r\n       \r\n  \r\n\r\n    // }\r\n\r\n    // ExecuteOpponentsSpecificEventSelection = async() => {\r\n\r\n\r\n    //     //Users Event selection\r\n    //     var OpponentsEventSelection = this.state.OpponentsEventSelection;\r\n\r\n\r\n\r\n    //       //Test to see if correct data\r\n    //       console.log(OpponentsEventFieldLocations);\r\n\r\n    //        //Array to store event Locations\r\n    //        var OpponentsEventFieldLocations = this.state.OpponentsEventFieldLocations;\r\n   \r\n    //        var myUserId = firebase.auth().currentUser.uid;\r\n    //        var tempEventFieldLocations = this.state.tempEventFieldLocations;\r\n           \r\n    //        var SportType = this.state.SportType;\r\n           \r\n    //         const { state, setParams, navigate } = this.props.navigation;\r\n    //         const params = state.params || {};\r\n          \r\n    //        //empty tempEventFieldLocations as this is only a temp array\r\n    //        tempEventFieldLocations.splice(0,tempEventFieldLocations.length);\r\n   \r\n    //        //filter array to get the specific player and event locations\r\n    //        for (var i = 0; i < OpponentsEventFieldLocations.length; i++) \r\n    //        {\r\n   \r\n    //            if(OpponentsEventFieldLocations[i].EventType == OpponentsEventSelection)\r\n    //            {\r\n   \r\n    //                var data = {\r\n    //                    x:OpponentsEventFieldLocations[i].x, \r\n    //                    y:OpponentsEventFieldLocations[i].y \r\n    //                };\r\n   \r\n   \r\n    //                //Push to new temp EventFieldLocations\r\n    //                this.state.tempEventFieldLocations.push(data);\r\n   \r\n    //            }\r\n    //        }\r\n\r\n\r\n    //        if(SportType == 'GAA')\r\n    //        {\r\n    //              //Make Field Image appear\r\n    //              this.setState({OpponentsSpecificStatFieldEventsSoccerView:true});\r\n    //        }\r\n    //        else if (SportType == 'Soccer')\r\n    //        {\r\n    //              //Make Field Image appear\r\n    //              this.setState({OpponentsSpecificStatFieldEventsSoccerView:true});\r\n    //        }\r\n \r\n    //       //Make Field Image appear\r\n    //       this.setState({OpponentsFieldEventsView:true});\r\n\r\n    //       this.setState({displayReviewGameStats:false});\r\n\r\n    //       this.setState({displayOpponentsSpecificEventSelection:false});\r\n\r\n    // }\r\n\r\n\r\n\r\n\r\n        render(){\r\n            \r\n            var ReviewGameStats;\r\n            var ReviewPlayerStats;\r\n            var ReviewSelection;\r\n            var TeamOption;\r\n            var PlayerStats;\r\n            \r\n            var FieldWithPlots;\r\n        \r\n            var SportType = this.state.SportType;\r\n            // var displayReviewGameStats = this.state.displayReviewGameStats;\r\n            // var displayReviewYourTeamPlayer = this.state.displayReviewYourTeamPlayer;\r\n            // var displayReviewOpponentsPlayer = this.state.displayReviewOpponentsPlayer;\r\n\r\n            // var displaySelectedPlayerStats = this.state.displaySelectedPlayerStats;\r\n            // var displaySelectedOpponentsPlayerStats = this.state.displaySelectedOpponentsPlayerStats; \r\n\r\n            // var displayOpponentsSelectedPlayerStats = this.state.displayOpponentsSelectedPlayerStats;\r\n            // var displayReviewSelection = this.state.displayReviewSelection;\r\n\r\n            // var YourTeamFieldEventsView = this.state.YourTeamFieldEventsView;\r\n            // var OpponentsFieldEventsView = this.state.OpponentsFieldEventsView;\r\n\r\n            // var displayEventSelection = this.state.displayEventSelection;\r\n            // var displayOpponentsEventSelection = this.state.displayOpponentsEventSelection;\r\n\r\n            // var displayTeamOption = this.state.displayTeamOption;\r\n\r\n            // var displayTeamSpecificEventSelection = this.state.displayTeamSpecificEventSelection;\r\n            // var displayOpponentsSpecificEventSelection = this.state.displayOpponentsSpecificEventSelection; \r\n\r\n\r\n\r\n\r\n            var displayReviewSelection = this.state.displayReviewSelection;\r\n            var displayReviewGameStats = this.state.displayReviewGameStats;\r\n\r\n            //Event Selection - Overall Team/Opponent Team Events\r\n            var SelectAnEvent_ReviewGameStats_YourTeam  = this.state.SelectAnEvent_ReviewGameStats_YourTeam;\r\n            var SelectAnEvent_ReviewGameStats_Opponents = this.state.SelectAnEvent_ReviewGameStats_Opponents;\r\n\r\n            //Event Selection - Player Specific Event Selection  \r\n            var SelectAnEvent_ReviewGameStats_YourTeamPlayer = this.state.SelectAnEvent_ReviewGameStats_YourTeamPlayer;\r\n            var SelectAnEvent_ReviewGameStats_Opponents_TeamPlayer = this.state.SelectAnEvent_ReviewGameStats_Opponents_TeamPlayer;\r\n\r\n            //Field Location views - Overall Team/Opponent Team Events (GAA + Soccer)\r\n            var YourTeamSpecificStatFieldEvents = this.state.YourTeamSpecificStatFieldEvents;\r\n            var OpponentsSpecificStatFieldEvents = this.state.OpponentsSpecificStatFieldEvents;\r\n\r\n\r\n                    if(displayReviewSelection == true)\r\n                    {\r\n                        ReviewSelection = (\r\n                            <ScrollView style={stylesViewGame.container}>\r\n        \r\n                                <TouchableOpacity style={stylesViewGame.button} onPress = {this.ReviewGameStats}>\r\n                                    <Text style={stylesViewGame.Text}>Review Games Stats</Text>\r\n                                </TouchableOpacity>\r\n                                \r\n                                <TouchableOpacity style={stylesViewGame.button} onPress = {this.SelectPlayerSelection}>\r\n                                    <Text style={stylesViewGame.Text}>View a specific player stats</Text>\r\n                                </TouchableOpacity>\r\n                            \r\n                            </ScrollView>\r\n                            \r\n                            \r\n                        );\r\n        \r\n                    }\r\n\r\n\r\n\r\n                    if(displayReviewGameStats == true)\r\n                    {\r\n\r\n                        if(SportType == 'GAA')\r\n                        {\r\n\r\n                            ReviewGameStats= (\r\n\r\n                                <ScrollView style={stylesViewGame.container}>\r\n                                    <View style={stylesViewGame.headerContainer}>\r\n                                        <Text style={stylesViewGame.Text}>{this.state.TeamName}</Text>\r\n                                    </View>\r\n\r\n                                    <View style={stylesViewGame.StatRow}>\r\n                                        <Text style={stylesViewGame.Text}> Goals: {this.state.totalTeamGoals}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Points: {this.state.totalTeamPoints}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots: {this.state.totalTeamShots}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots on target: {this.state.totalTeamShotsOnTarget}</Text>\r\n                                    </View>\r\n\r\n                                    <TouchableOpacity style={stylesViewGame.button} onPress = {this.TeamSpecificStat}>\r\n                                        <Text style={stylesViewGame.Text}>Review a specific stat from {this.state.TeamName} </Text>\r\n                                    </TouchableOpacity>\r\n\r\n\r\n                                    <View style={stylesViewGame.headerContainer}>\r\n                                        <Text style={stylesViewGame.Text}> Opponents</Text>\r\n                                    </View>\r\n\r\n                                    <View style={stylesViewGame.StatRow}>\r\n                                        <Text style={stylesViewGame.Text}> Goals: {this.state.totalOpponentsTeamGoals}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Points: {this.state.totalOpponentsTeamPoints}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots: {this.state.totalOpponentsTeamShots}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots on target: {this.state.totalOpponentsTeamShotsOnTarget}</Text>\r\n                                    </View>\r\n\r\n                                    <TouchableOpacity style={stylesViewGame.button} onPress = {this.OpponentsSpecificStat}>\r\n                                        <Text style={stylesViewGame.Text}>Review a specific stat from the Opponents records</Text>\r\n                                    </TouchableOpacity>\r\n\r\n\r\n                                </ScrollView>\r\n                            );\r\n\r\n                        }\r\n                        else if(SportType == 'Soccer')\r\n                        {\r\n\r\n                            ReviewGameStats= (\r\n\r\n                                <ScrollView style={stylesViewGame.container}>\r\n                                    <View style={stylesViewGame.headerContainer}>\r\n                                        <Text style={stylesViewGame.Text}>{this.state.TeamName}</Text>\r\n                                    </View>\r\n\r\n                                    <View style={stylesViewGame.StatRow}>\r\n                                        <Text style={stylesViewGame.Text}> Goals: {this.state.totalTeamGoals}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots: {this.state.totalTeamShots}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots on target: {this.state.totalTeamShotsOnTarget}</Text>\r\n                                    </View>\r\n\r\n                                    <TouchableOpacity style={stylesViewGame.button} onPress = {this.TeamSpecificStat}>\r\n                                        <Text style={stylesViewGame.Text}>Review a specific stat from {this.state.TeamName} </Text>\r\n                                    </TouchableOpacity>\r\n\r\n\r\n                                    <View style={stylesViewGame.headerContainer}>\r\n                                        <Text style={stylesViewGame.Text}> Opponents</Text>\r\n                                    </View>\r\n\r\n                                    <View style={stylesViewGame.StatRow}>\r\n                                        <Text style={stylesViewGame.Text}> Goals: {this.state.totalOpponentsTeamGoals}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots: {this.state.totalOpponentsTeamShots}</Text>\r\n                                        <Text style={stylesViewGame.Text}> Shots on target: {this.state.totalOpponentsTeamShotsOnTarget}</Text>\r\n                                    </View>\r\n\r\n                                    <TouchableOpacity style={stylesViewGame.button} onPress = {this.OpponentsSpecificStat}>\r\n                                        <Text style={stylesViewGame.Text}>Review a specific stat from the Opponents records</Text>\r\n                                    </TouchableOpacity>\r\n\r\n\r\n                                </ScrollView>\r\n                            );  \r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                    if(SelectAnEvent_ReviewGameStats_YourTeam)\r\n                    {\r\n\r\n                        if(SportType == 'GAA')\r\n                        {\r\n\r\n                            ReviewPlayerStats = (\r\n                                \r\n                                <ScrollView style={stylesViewGame.container}>\r\n            \r\n                                        <Text style={stylesViewGame.Text}>Select a stat below</Text>\r\n            \r\n                                        <Picker\r\n                                            selectedValue={this.state.YourTeamEventSelection}\r\n                                            style={stylesViewGame.input}\r\n                                            onValueChange={(text) => this.setState({YourTeamEventSelection:text})}\r\n                                        >\r\n                                            \r\n                                            <Picker.Item label=\"Select a event\" value=\"\" />\r\n                                            <Picker.Item label=\"Goal\" value=\"Goal\" />\r\n                                            <Picker.Item label=\"Point\" value=\"Point\"/>\r\n                                            <Picker.Item label=\"Pass\" value=\"Pass\"/>\r\n                        \r\n                        \r\n                                        </Picker>\r\n            \r\n                                        <TouchableOpacity style={stylesViewGame.button} onPress = {this.ExecuteYourTeamEventAnaylsis}>\r\n                                            <Text style={stylesViewGame.Text}>Review this teams games stats</Text>\r\n                                        </TouchableOpacity>   \r\n            \r\n                                </ScrollView>\r\n                            );\r\n\r\n                        }\r\n                        else if(SportType == 'Soccer')\r\n                        {\r\n                            ReviewPlayerStats = (\r\n                                \r\n                                <ScrollView style={stylesViewGame.container}>\r\n            \r\n                                        <Text style={stylesViewGame.Text}>Select a stat below</Text>\r\n            \r\n                                        <Picker\r\n                                            selectedValue={this.state.YourTeamEventSelection}\r\n                                            style={stylesViewGame.input}\r\n                                            onValueChange={(text) => this.setState({YourTeamEventSelection:text})}\r\n                                        >\r\n                                            \r\n                                            <Picker.Item label=\"Select a event\" value=\"\" />\r\n                                            <Picker.Item label=\"Goal\" value=\"Goal\" />\r\n                                            <Picker.Item label=\"Pass\" value=\"Pass\"/>\r\n                        \r\n                        \r\n                                        </Picker>\r\n            \r\n                                        <TouchableOpacity style={stylesViewGame.button} onPress = {this.ExecuteYourTeamEventAnaylsis}>\r\n                                            <Text style={stylesViewGame.Text}>Review this teams games stats</Text>\r\n                                        </TouchableOpacity>   \r\n            \r\n                                </ScrollView>\r\n                            );\r\n                        }\r\n                    }\r\n\r\n                    if(SelectAnEvent_ReviewGameStats_Opponents)\r\n                    {\r\n\r\n                        if(SportType == 'GAA')\r\n                        {\r\n\r\n                            ReviewPlayerStats = (\r\n\r\n                                <ScrollView style={stylesViewGame.container}>\r\n                \r\n                                    <Text style={stylesViewGame.Text}>Select a stat below</Text>\r\n                \r\n                                        <Picker\r\n                                            selectedValue={this.state.OpponentsEventSelection}\r\n                                            style={stylesViewGame.input}\r\n                                            onValueChange={(text) => this.setState({OpponentsEventSelection:text})}\r\n                                        >\r\n                                                        \r\n                                            <Picker.Item label=\"Select a event\" value=\"\" />\r\n                                            <Picker.Item label=\"Goal\" value=\"Goal\" />\r\n                                            <Picker.Item label=\"Point\" value=\"Point\"/>\r\n                                            <Picker.Item label=\"Pass\" value=\"Pass\"/>\r\n                                    \r\n                                    \r\n                                            </Picker>\r\n                \r\n                                            <TouchableOpacity style={stylesViewGame.button} onPress = {this.ExecuteOpponentsPlayerEventAnaylsis}>\r\n                                                <Text style={stylesViewGame.Text}>Submit</Text>\r\n                                            </TouchableOpacity>   \r\n                \r\n                                </ScrollView>\r\n                            );\r\n                        }\r\n                        else if(SportType == 'Soccer')\r\n                        {\r\n\r\n                            ReviewPlayerStats = (\r\n\r\n                                <ScrollView style={stylesViewGame.container}>\r\n                \r\n                                    <Text style={stylesViewGame.Text}>Select a stat</Text>\r\n                \r\n                                        <Picker\r\n                                            selectedValue={this.state.OpponentsEventSelection}\r\n                                            style={stylesViewGame.input}\r\n                                            onValueChange={(text) => this.setState({OpponentsEventSelection:text})}\r\n                                        >\r\n                                                        \r\n                                            <Picker.Item label=\"Select a event\" value=\"\" />\r\n                                            <Picker.Item label=\"Goal\" value=\"Goal\" />\r\n                                            <Picker.Item label=\"Pass\" value=\"Pass\"/>\r\n                                    \r\n                                    \r\n                                            </Picker>\r\n                \r\n                                            <TouchableOpacity style={stylesViewGame.button} onPress = {this.ExecuteOpponentsPlayerEventAnaylsis}>\r\n                                                <Text style={stylesViewGame.Text}>Submit</Text>\r\n                                            </TouchableOpacity>   \r\n                \r\n                                </ScrollView>\r\n                            );\r\n                        }\r\n                    }\r\n\r\n\r\n                 //YOUR_TEAM SPECIFIC PLAYER  + OPPONENTS SPECIFIC PLAYER REVIEW\r\n                \r\n                 if(SelectAnEvent_ReviewGameStats_YourTeamPlayer == true)\r\n                 {\r\n\r\n                        ReviewPlayerStats = (\r\n\r\n                            <ScrollView style={stylesViewGame.container}>\r\n\r\n                                <Text style={stylesViewGame.Text}>Select a player</Text>\r\n\r\n                                <Picker\r\n                                    selectedValue={this.state.selectedTeamPlayer}\r\n                                    style={stylesViewGame.input}\r\n                                    onValueChange={(text) => this.setState({selectedTeamPlayer:text})}\r\n                                >\r\n\r\n                                <Picker.Item label=\"Select a Player\" value=\"\" />\r\n                                    {this.state.PlayerData.map((item, index) => {\r\n                                        return (\r\n\r\n                                                <Picker.Item label={item.PlayerName} value={item.PlayerID}/>\r\n                                            \r\n                                                )\r\n\r\n                                    })} \r\n\r\n                                </Picker> \r\n\r\n                                <Text style={stylesViewGame.Text}>Select a stat (*Optional*)</Text>\r\n\r\n                                <Picker\r\n                                    selectedValue={this.state.YourTeamEventSelection}\r\n                                    style={stylesViewGame.input}\r\n                                    onValueChange={(text) => this.setState({YourTeamEventSelection:text})}\r\n                                    >\r\n                                                    \r\n                                        <Picker.Item label=\"Select a event\" value=\"\" />\r\n                                        <Picker.Item label=\"Goal\" value=\"Goal\" />\r\n                                        <Picker.Item label=\"Pass\" value=\"Pass\"/>\r\n\r\n\r\n                                </Picker>  \r\n\r\n                                <TouchableOpacity style={stylesViewGame.button} onPress = {this.ReviewPlayerStats}>\r\n                                    <Text style={stylesViewGame.Text}>Review this players games stats</Text>\r\n                                </TouchableOpacity> \r\n\r\n                                \r\n                                <TouchableOpacity style={stylesViewGame.button} onPress = {this.GetSpecificPlayerEventLocations}>\r\n                                    <Text style={stylesViewGame.Text}>Review this players event locations</Text>\r\n                                </TouchableOpacity> \r\n\r\n\r\n                                \r\n                            </ScrollView>\r\n\r\n                        );\r\n\r\n                    \r\n                 }\r\n\r\n                 if(SelectAnEvent_ReviewGameStats_Opponents_TeamPlayer == true)\r\n                 {\r\n\r\n                     ReviewPlayerStats = (\r\n\r\n                         <ScrollView style={stylesViewGame.container}>\r\n\r\n                             <Text style={stylesViewGame.Text}>Select an Opponents player</Text>\r\n\r\n                             <Picker\r\n                                 selectedValue={this.state.selectedOpponentsPlayer}\r\n                                 style={stylesViewGame.input}\r\n                                 onValueChange={(text) => this.setState({selectedOpponentsPlayer:text})}\r\n                             >\r\n\r\n                             <Picker.Item label=\"Select a Player\" value=\"\" />\r\n                                 {this.state.OpponentsPlayerData.map((item, index) => {\r\n                                     return (\r\n\r\n                                             <Picker.Item label={item.PlayerName} value={item.PlayerID}/>\r\n\r\n                                             )\r\n\r\n                                 })}\r\n\r\n                             </Picker> \r\n\r\n                             <TouchableOpacity style={stylesViewGame.button} onPress = {this.ReviewOpponentsPlayerStats}>\r\n                                 <Text style={stylesViewGame.Text}>Review this players games stats</Text>\r\n                             </TouchableOpacity>   \r\n\r\n                         </ScrollView>\r\n\r\n                     );\r\n                 }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                if(YourTeamSpecificStatFieldEvents == true)\r\n                {\r\n\r\n\r\n                   //Condition to check if the Device is smaller than the image so for mobile view we check the StatsStoredUsingScreenWidth  \r\n                        //if screenwidth < StatsStoredUsingScreenWidth || screenHeight < StatsStoredUsingScreenHeight\r\n                            //Then alert the user that this maybe be inaccurate . please try a larger device screen size e.g web version\r\n                                //ScrollView possibly for mobile\r\n\r\n                    if(SportType == 'GAA')\r\n                    {\r\n\r\n                        if(screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight)\r\n                        {\r\n                            \r\n                                if(screenWidth < 600 || screenHeight < 376)\r\n                                {\r\n                                    alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n\r\n                                    FieldWithPlots = (\r\n                                        //<Image style ={{width: this.state.StatsStoredUsingScreenWidth, height: this.state.StatsStoredUsingScreenHeight}}   \r\n\r\n                                        <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n\r\n                                            <ScrollView>\r\n                                       \r\n\r\n                                            <Image style ={stylesViewGame.imagePxGAA}                              \r\n                                            source={require('./GAApitch1.png')}/>\r\n                            \r\n                                                        {this.state.EventFieldLocations.map((data) => {\r\n                                                            return (\r\n                                                            <View \r\n                                                                style={{\r\n                                                                position: 'absolute',\r\n                                                                left: data.x,\r\n                                                                top: data.y,\r\n                                                                backgroundColor:'#242424',\r\n                                                                width: 10,\r\n                                                                height: 10,\r\n                                                                borderRadius: 50\r\n                                                                }}>\r\n                                                            </View> \r\n                                                    \r\n                                                        )\r\n                                                    })} \r\n                    \r\n\r\n                                            </ScrollView>\r\n\r\n                                 \r\n\r\n                                        </ScrollView>\r\n                \r\n            \r\n            \r\n                                    );\r\n\r\n\r\n\r\n                                } \r\n                                else \r\n                                {\r\n                          \r\n                                    FieldWithPlots = (\r\n\r\n                \r\n                                        <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n\r\n                                        <ScrollView>\r\n                                                    \r\n                                                    <Image style ={stylesViewGame.imagePxGAA}                        \r\n                                                    source={require('./GAApitch1.png')}/>\r\n                                                    {this.state.EventFieldLocations.map((data) => {\r\n                                                        return (\r\n                                                        <View \r\n                                                            style={{\r\n                                                            position: 'absolute',\r\n                                                            left: data.x,\r\n                                                            top: data.y,\r\n                                                            backgroundColor:'#242424',\r\n                                                            width: 10,\r\n                                                            height: 10,\r\n                                                            borderRadius: 50\r\n                                                            }}>\r\n                                                        </View> \r\n                                                \r\n                                                    )\r\n                                                })} \r\n                    \r\n                                   </ScrollView>\r\n                                </ScrollView>\r\n                                \r\n                                    );\r\n\r\n                                }\r\n                       \r\n\r\n            \r\n\r\n\r\n                        }   \r\n\r\n                        else\r\n                        {\r\n\r\n\r\n\r\n                            if(screenWidth < 600 || screenHeight < 376)\r\n                            {\r\n    \r\n                                alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n                                \r\n                                FieldWithPlots = (\r\n\r\n                    \r\n                        \r\n                                    <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n\r\n                                        <ScrollView>\r\n                                                \r\n                                                \r\n                                            <Image style ={stylesViewGame.imagePxGAA}                              \r\n                                                source={require('./GAApitch1.png')}/>\r\n                                                {this.state.EventFieldLocations.map((data) => {\r\n                                                    return (\r\n                                                    <View \r\n                                                        style={{\r\n                                                        position: 'absolute',\r\n                                                        left: data.x,\r\n                                                        top: data.y,\r\n                                                        backgroundColor:'#242424',\r\n                                                        width: 10,\r\n                                                        height: 10,\r\n                                                        borderRadius: 50\r\n                                                        }}>\r\n                                                    </View> \r\n                                            \r\n                                                )\r\n                                            })} \r\n                                        </ScrollView>\r\n                                    </ScrollView>\r\n                \r\n                                );\r\n                            }\r\n\r\n                            FieldWithPlots = (\r\n\r\n                    \r\n                        \r\n                                <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n\r\n                                    <ScrollView>\r\n                                            \r\n                                            \r\n                                        <Image style ={stylesViewGame.imagePxGAA}                              \r\n                                            source={require('./GAApitch1.png')}/>\r\n                                            {this.state.EventFieldLocations.map((data) => {\r\n                                                return (\r\n                                                <View \r\n                                                    style={{\r\n                                                    position: 'absolute',\r\n                                                    left: data.x,\r\n                                                    top: data.y,\r\n                                                    backgroundColor:'#242424',\r\n                                                    width: 10,\r\n                                                    height: 10,\r\n                                                    borderRadius: 50\r\n                                                    }}>\r\n                                                </View> \r\n                                        \r\n                                            )\r\n                                        })} \r\n                                    </ScrollView>\r\n                                </ScrollView>\r\n\r\n                            );\r\n\r\n                        }   \r\n\r\n                    }\r\n                    else if(SportType == 'Soccer')\r\n                    {\r\n\r\n                            if(screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight)\r\n                            {\r\n\r\n                                if(screenWidth < 600 || screenHeight < 376)\r\n                                {\r\n                                    alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n\r\n                            \r\n                                    FieldWithPlots = (\r\n                                        <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                                <ScrollView>\r\n                                                \r\n                                              \r\n \r\n                                                    <Image style ={stylesViewGame.imageSoccerMobile} \r\n                                                        source={require('./SoccerField.png')}/> \r\n                                                        {this.state.EventFieldLocations.map((data) => {\r\n                                                            return (\r\n                                                            <View \r\n                                                                style={{\r\n                                                            \r\n                                                                position: 'absolute',\r\n                                                                left: data.x,\r\n                                                                top: data.y,\r\n                                                                backgroundColor:'#242424',\r\n                                                                width: 10,\r\n                                                                height: 10,\r\n                                                                borderRadius: 50\r\n                                                                }}>\r\n                                                            </View> \r\n                                                \r\n                                                            )\r\n                                                            })}        \r\n                                                </ScrollView>\r\n\r\n                                        </ScrollView>\r\n                                    );\r\n\r\n                                }\r\n                                else\r\n                                {\r\n\r\n\r\n\r\n                                    FieldWithPlots = (\r\n\r\n                                        <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                            <ScrollView>\r\n                                        \r\n                                                \r\n                                            <Image style ={stylesViewGame.imagePxSoccer}                              \r\n                                                source={require('./SoccerField.png')}/>\r\n                                                {this.state.EventFieldLocations.map((data) => {\r\n                                                    return (\r\n                                                    <View \r\n                                                        style={{\r\n                                                        position: 'absolute',\r\n                                                        left: data.x,\r\n                                                        top: data.y,\r\n                                                        backgroundColor:'#242424',\r\n                                                        width: 10,\r\n                                                        height: 10,\r\n                                                        borderRadius: 50\r\n                                                        }}>\r\n                                                    </View> \r\n                                            \r\n                                                )\r\n                                            })} \r\n                \r\n                                            </ScrollView>\r\n\r\n                                        </ScrollView>\r\n            \r\n                                    );\r\n                                }\r\n\r\n                        \r\n\r\n                            }\r\n                            else\r\n                            {\r\n\r\n                                if(screenWidth < 600 || screenHeight < 376)\r\n                                {\r\n                                    alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n\r\n                            \r\n                                    FieldWithPlots = (\r\n                                        <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                        <ScrollView>\r\n                                        \r\n                                        \r\n                                                \r\n                                            \r\n                                        <Image style ={stylesViewGame.imageSoccerMobile} \r\n                                                        source={require('./SoccerField.png')}/> \r\n                                                        {this.state.EventFieldLocations.map((data) => {\r\n                                                            return (\r\n                                                            <View \r\n                                                                style={{\r\n                                                            \r\n                                                                position: 'absolute',\r\n                                                                left: data.x,\r\n                                                                top: data.y,\r\n                                                                backgroundColor:'#242424',\r\n                                                                width: 10,\r\n                                                                height: 10,\r\n                                                                borderRadius: 50\r\n                                                                }}>\r\n                                                            </View> \r\n                                                \r\n                                                            )\r\n                                                            })}        \r\n                                               \r\n\r\n                                             </ScrollView>\r\n                                        </ScrollView>\r\n                                    );\r\n\r\n                                }\r\n\r\n                            \r\n                                FieldWithPlots = (\r\n\r\n                    \r\n                                    <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                    <ScrollView>\r\n                                                \r\n                                            <Image style ={stylesViewGame.imagePxSoccer}                              \r\n                                                source={require('./SoccerField.png')}/>\r\n                                                {this.state.EventFieldLocations.map((data) => {\r\n                                                    return (\r\n                                                    <View \r\n                                                        style={{\r\n                                                        position: 'absolute',\r\n                                                        left: data.x,\r\n                                                        top: data.y,\r\n                                                        backgroundColor:'#242424',\r\n                                                        width: 10,\r\n                                                        height: 10,\r\n                                                        borderRadius: 50\r\n                                                        }}>\r\n                                                    </View> \r\n                                            \r\n                                                )\r\n                                            })} \r\n                \r\n                                            </ScrollView>\r\n                                        </ScrollView>\r\n                                \r\n                \r\n                                );\r\n                            }\r\n\r\n\r\n\r\n                    }\r\n                  \r\n                }\r\n\r\n                if(OpponentsSpecificStatFieldEvents == true)\r\n                {\r\n\r\n\r\n                   // OpponentsEventFieldLocations\r\n\r\n                   //Condition to check if the Device is smaller than the image so for mobile view we check the StatsStoredUsingScreenWidth  \r\n                        //if screenwidth < StatsStoredUsingScreenWidth || screenHeight < StatsStoredUsingScreenHeight\r\n                            //Then alert the user that this maybe be inaccurate . please try a larger device screen size e.g web version\r\n                                //ScrollView possibly for mobile\r\n                    \r\n              \r\n                                if(SportType == 'GAA')\r\n                                {\r\n            \r\n                                    if(screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight)\r\n                                    {\r\n                                        \r\n                                            if(screenWidth < 600 || screenHeight < 376)\r\n                                            {\r\n                                                alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n            \r\n                                                FieldWithPlots = (\r\n                                                    //<Image style ={{width: this.state.StatsStoredUsingScreenWidth, height: this.state.StatsStoredUsingScreenHeight}}   \r\n            \r\n                                                    <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n            \r\n                                                        <ScrollView>\r\n                                                   \r\n            \r\n                                                        <Image style ={stylesViewGame.imagePxGAA}                              \r\n                                                        source={require('./GAApitch1.png')}/>\r\n                                        \r\n                                                                    {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                                        return (\r\n                                                                        <View \r\n                                                                            style={{\r\n                                                                            position: 'absolute',\r\n                                                                            left: data.x,\r\n                                                                            top: data.y,\r\n                                                                            backgroundColor:'#242424',\r\n                                                                            width: 10,\r\n                                                                            height: 10,\r\n                                                                            borderRadius: 50\r\n                                                                            }}>\r\n                                                                        </View> \r\n                                                                \r\n                                                                    )\r\n                                                                })} \r\n                                \r\n            \r\n                                                        </ScrollView>\r\n            \r\n                                             \r\n            \r\n                                                    </ScrollView>\r\n                            \r\n                        \r\n                        \r\n                                                );\r\n            \r\n            \r\n            \r\n                                            } \r\n                                            else \r\n                                            {\r\n                                      \r\n                                                FieldWithPlots = (\r\n            \r\n                            \r\n                                                    <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n            \r\n                                                    <ScrollView>\r\n                                                                \r\n                                                                <Image style ={stylesViewGame.imagePxGAA}                        \r\n                                                                source={require('./GAApitch1.png')}/>\r\n                                                                {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                                    return (\r\n                                                                    <View \r\n                                                                        style={{\r\n                                                                        position: 'absolute',\r\n                                                                        left: data.x,\r\n                                                                        top: data.y,\r\n                                                                        backgroundColor:'#242424',\r\n                                                                        width: 10,\r\n                                                                        height: 10,\r\n                                                                        borderRadius: 50\r\n                                                                        }}>\r\n                                                                    </View> \r\n                                                            \r\n                                                                )\r\n                                                            })} \r\n                                \r\n                                               </ScrollView>\r\n                                            </ScrollView>\r\n                                            \r\n                                                );\r\n            \r\n                                            }\r\n                                   \r\n            \r\n                        \r\n            \r\n            \r\n                                    }   \r\n            \r\n                                    else\r\n                                    {\r\n            \r\n            \r\n            \r\n                                        if(screenWidth < 600 || screenHeight < 376)\r\n                                        {\r\n                \r\n                                            alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n                                            \r\n                                            FieldWithPlots = (\r\n            \r\n                                \r\n                                    \r\n                                                <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n            \r\n                                                    <ScrollView>\r\n                                                            \r\n                                                            \r\n                                                        <Image style ={stylesViewGame.imagePxGAA}                              \r\n                                                            source={require('./GAApitch1.png')}/>\r\n                                                            {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                                return (\r\n                                                                <View \r\n                                                                    style={{\r\n                                                                    position: 'absolute',\r\n                                                                    left: data.x,\r\n                                                                    top: data.y,\r\n                                                                    backgroundColor:'#242424',\r\n                                                                    width: 10,\r\n                                                                    height: 10,\r\n                                                                    borderRadius: 50\r\n                                                                    }}>\r\n                                                                </View> \r\n                                                        \r\n                                                            )\r\n                                                        })} \r\n                                                    </ScrollView>\r\n                                                </ScrollView>\r\n                            \r\n                                            );\r\n                                        }\r\n            \r\n                                        FieldWithPlots = (\r\n            \r\n                                \r\n                                    \r\n                                            <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n            \r\n                                                <ScrollView>\r\n                                                        \r\n                                                        \r\n                                                    <Image style ={stylesViewGame.imagePxGAA}                              \r\n                                                        source={require('./GAApitch1.png')}/>\r\n                                                        {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                            return (\r\n                                                            <View \r\n                                                                style={{\r\n                                                                position: 'absolute',\r\n                                                                left: data.x,\r\n                                                                top: data.y,\r\n                                                                backgroundColor:'#242424',\r\n                                                                width: 10,\r\n                                                                height: 10,\r\n                                                                borderRadius: 50\r\n                                                                }}>\r\n                                                            </View> \r\n                                                    \r\n                                                        )\r\n                                                    })} \r\n                                                </ScrollView>\r\n                                            </ScrollView>\r\n            \r\n                                        );\r\n            \r\n                                    }   \r\n            \r\n                                }\r\n                                else if(SportType == 'Soccer')\r\n                                {\r\n            \r\n                                        if(screenWidth != this.state.StatsStoredUsingScreenWidth && screenHeight != this.state.StatsStoredUsingScreenHeight)\r\n                                        {\r\n            \r\n                                            if(screenWidth < 600 || screenHeight < 376)\r\n                                            {\r\n                                                alert('Warning - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n            \r\n                                        \r\n                                                FieldWithPlots = (\r\n                                                    <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                                            <ScrollView>\r\n                                                            \r\n                                                          \r\n             \r\n                                                                <Image style ={stylesViewGame.imageSoccerMobile} \r\n                                                                    source={require('./SoccerField.png')}/> \r\n                                                                    {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                                        return (\r\n                                                                        <View \r\n                                                                            style={{\r\n                                                                        \r\n                                                                            position: 'absolute',\r\n                                                                            left: data.x,\r\n                                                                            top: data.y,\r\n                                                                            backgroundColor:'#242424',\r\n                                                                            width: 10,\r\n                                                                            height: 10,\r\n                                                                            borderRadius: 50\r\n                                                                            }}>\r\n                                                                        </View> \r\n                                                            \r\n                                                                        )\r\n                                                                        })}        \r\n                                                            </ScrollView>\r\n            \r\n                                                    </ScrollView>\r\n                                                );\r\n            \r\n                                            }\r\n                                            else\r\n                                            {\r\n            \r\n            \r\n            \r\n                                                FieldWithPlots = (\r\n            \r\n                                                    <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                                        <ScrollView>\r\n                                                    \r\n                                                            \r\n                                                        <Image style ={stylesViewGame.imagePxSoccer}                              \r\n                                                            source={require('./SoccerField.png')}/>\r\n                                                            {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                                return (\r\n                                                                <View \r\n                                                                    style={{\r\n                                                                    position: 'absolute',\r\n                                                                    left: data.x,\r\n                                                                    top: data.y,\r\n                                                                    backgroundColor:'#242424',\r\n                                                                    width: 10,\r\n                                                                    height: 10,\r\n                                                                    borderRadius: 50\r\n                                                                    }}>\r\n                                                                </View> \r\n                                                        \r\n                                                            )\r\n                                                        })} \r\n                            \r\n                                                        </ScrollView>\r\n            \r\n                                                    </ScrollView>\r\n                        \r\n                                                );\r\n                                            }\r\n            \r\n                                    \r\n            \r\n                                        }\r\n                                        else\r\n                                        {\r\n            \r\n                                            if(screenWidth < 600 || screenHeight < 376)\r\n                                            {\r\n                                                alert('Warnin1g - This device is too small to display the full image. Please scroll across the image to navigate or use a larger device screen size.');\r\n            \r\n                                        \r\n                                                FieldWithPlots = (\r\n                                                    <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                                    <ScrollView>\r\n                                                    \r\n                                                    \r\n                                                            \r\n                                                        \r\n                                                    <Image style ={stylesViewGame.imageSoccerMobile} \r\n                                                                    source={require('./SoccerField.png')}/> \r\n                                                                    {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                                        return (\r\n                                                                        <View \r\n                                                                            style={{\r\n                                                                        \r\n                                                                            position: 'absolute',\r\n                                                                            left: data.x,\r\n                                                                            top: data.y,\r\n                                                                            backgroundColor:'#242424',\r\n                                                                            width: 10,\r\n                                                                            height: 10,\r\n                                                                            borderRadius: 50\r\n                                                                            }}>\r\n                                                                        </View> \r\n                                                            \r\n                                                                        )\r\n                                                                        })}        \r\n                                                           \r\n            \r\n                                                         </ScrollView>\r\n                                                    </ScrollView>\r\n                                                );\r\n            \r\n                                            }\r\n            \r\n                                        \r\n                                            FieldWithPlots = (\r\n            \r\n                                \r\n                                                <ScrollView horizontal={true} style={stylesViewGame.imagePlotContainer}>\r\n                                                <ScrollView>\r\n                                                            \r\n                                                        <Image style ={stylesViewGame.imagePxSoccer}                              \r\n                                                            source={require('./SoccerField.png')}/>\r\n                                                            {this.state.OpponentsEventFieldLocations.map((data) => {\r\n                                                                return (\r\n                                                                <View \r\n                                                                    style={{\r\n                                                                    position: 'absolute',\r\n                                                                    left: data.x,\r\n                                                                    top: data.y,\r\n                                                                    backgroundColor:'#242424',\r\n                                                                    width: 10,\r\n                                                                    height: 10,\r\n                                                                    borderRadius: 50\r\n                                                                    }}>\r\n                                                                </View> \r\n                                                        \r\n                                                            )\r\n                                                        })} \r\n                            \r\n                                                        </ScrollView>\r\n                                                    </ScrollView>\r\n                                            \r\n                            \r\n                                            );\r\n                                        }\r\n            \r\n            \r\n            \r\n                                }\r\n                }\r\n\r\n\r\n\r\n            return (\r\n \r\n                <View style={{flex: 1, backgroundColor: '#252626'}}>\r\n                      \r\n\r\n                        <View>\r\n                             {ReviewSelection}  \r\n                        </View>\r\n                        <View>\r\n                             {FieldWithPlots}\r\n                        </View>\r\n                        <View>\r\n                            {ReviewGameStats}\r\n                        </View>\r\n\r\n                        <View>\r\n                            {ReviewPlayerStats}\r\n                        </View>\r\n\r\n                        <View>\r\n                             {PlayerStats}\r\n                        </View>\r\n                     \r\n                     \r\n                      \r\n                </View>\r\n\r\n\r\n            )\r\n\r\n        }\r\n}\r\n\r\n\r\nconst stylesViewGame= StyleSheet.create({\r\n    container: {\r\n        backgroundColor: '#242424', \r\n        marginTop: 50,\r\n        marginBottom: 5,\r\n        marginLeft: 5,\r\n        marginRight: 5,\r\n        paddingLeft: 5,\r\n        // alignItems: 'center',\r\n    },\r\n    Text:{\r\n        color: \"white\",\r\n        fontSize:18,\r\n    \r\n       \r\n        justifyContent:'center'\r\n    },\r\n    headerContainer:{ \r\n\r\n        backgroundColor: '#FF6D01',\r\n        alignItems: \"center\",\r\n        borderWidth: 4,\r\n        borderColor:'#ffffff',\r\n         alignItems: 'center',\r\n        width: wp('50%') ,  // % of width device screen\r\n        marginTop:30,\r\n        padding:4,\r\n  \r\n    },\r\n    StatRow: {\r\n        flex:1,\r\n        // flexDirection:\"row\",\r\n        alignItems: \"center\",\r\n        marginBottom:10,\r\n        borderWidth: 4,\r\n        borderColor:'#ffffff',\r\n    },\r\n\r\n\r\n    dataContainer: {\r\n        backgroundColor: '#ffffff', \r\n        alignItems: 'center',\r\n        \r\n    },\r\n    container2: {\r\n        backgroundColor: '#ffffff', \r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        height: 48,\r\n        borderRadius: 5,\r\n        overflow: 'hidden',\r\n        backgroundColor: 'white',\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        paddingLeft: 16\r\n    },\r\n    button: {\r\n        backgroundColor: '#FF6D01',\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        marginTop: 20,\r\n        height: 48,\r\n        borderRadius: 5,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n  \r\n    \r\n    imagePxGAA:{\r\n    \r\n        height:376,\r\n        width:700,\r\n     \r\n     \r\n     },\r\n\r\n     imagePxGAAmobile:{\r\n    \r\n        height:300,\r\n        width:590,\r\n \r\n     \r\n     \r\n     },\r\n\r\n\r\n     imagePxSoccer:{\r\n        height:400,\r\n        width: 700,\r\n\r\n       \r\n      \r\n    },\r\n    \r\n   \r\nimageSoccerMobile:\r\n{\r\n      //Working \r\n         //Working \r\n         height:280,\r\n         width: 480,\r\n},\r\n   \r\n  \r\n\r\n    imagePlotContainer: {\r\n\r\n        \r\n  \r\n        //  flexWrap: 'wrap',\r\n        // // flexDirection:\"row\",\r\n        // position: 'relative',\r\n\r\n        \r\n    \r\n        \r\n    \r\n    },\r\n\r\n    imageGAA:{\r\n        width: win.width,\r\n        height: 300 * ratioGaaView, //399 is actual height of image\r\n    },\r\n    \r\n    \r\n    imageSoccer:{\r\n        width: win.width,\r\n        height: 376 * ratioSoccerView , //399 is actual height of image\r\n        top: '20%'\r\n    \r\n    },\r\n    \r\n    \r\n\r\n});\r\n\r\nexport default ViewGame;"]},"metadata":{},"sourceType":"module"}