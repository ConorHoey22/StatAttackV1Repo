{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { SearchStyle } from \"../Assets/Styles\";\nexport var SearchComponent = function (_React$PureComponent) {\n  _inherits(SearchComponent, _React$PureComponent);\n\n  var _super = _createSuper(SearchComponent);\n\n  function SearchComponent() {\n    _classCallCheck(this, SearchComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SearchComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          SearchInputProps = _this$props.SearchInputProps,\n          placeholderTextColor = _this$props.placeholderTextColor,\n          onClose = _this$props.onClose,\n          setText = _this$props.setText,\n          forceSelect = _this$props.forceSelect,\n          searchText = _this$props.searchText,\n          onBackRequest = _this$props.onBackRequest,\n          backButtonDisabled = _this$props.backButtonDisabled;\n      return React.createElement(View, {\n        style: SearchStyle.searchArea\n      }, !backButtonDisabled && this.touchableOpacityButton(onBackRequest, require(\"../Assets/Images/left-arrow.png\"), SearchStyle.leftBtn, SearchStyle.backButton), React.createElement(TextInput, _extends({\n        placeholder: searchText,\n        placeholderTextColor: placeholderTextColor,\n        style: [SearchStyle.textInput, forceSelect && SearchStyle.nonCloseButton, backButtonDisabled && SearchStyle.nonBackButton],\n        underlineColorAndroid: 'transparent',\n        onChangeText: function onChangeText(text) {\n          return setText(text);\n        }\n      }, SearchInputProps)), !forceSelect && this.touchableOpacityButton(onClose, require(\"../Assets/Images/close.png\"), SearchStyle.leftBtn, SearchStyle.closeButton));\n    }\n  }, {\n    key: \"touchableOpacityButton\",\n    value: function touchableOpacityButton(_onPress, imgSrc, buttonStyle, imgStyle) {\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _onPress();\n        },\n        style: buttonStyle\n      }, React.createElement(Image, {\n        source: imgSrc,\n        style: imgStyle\n      }));\n    }\n  }]);\n\n  return SearchComponent;\n}(React.PureComponent);","map":{"version":3,"sources":["../../src/Components/Search.tsx"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;;;AAIA,SAAS,WAAT;AAGA,WAAa,eAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACQ,kBAAM;AAAA,wBACqH,KAAK,KAD1H;AAAA,UACJ,gBADI,eACJ,gBADI;AAAA,UACc,oBADd,eACc,oBADd;AAAA,UACoC,OADpC,eACoC,OADpC;AAAA,UAC6C,OAD7C,eAC6C,OAD7C;AAAA,UACsD,WADtD,eACsD,WADtD;AAAA,UACmE,UADnE,eACmE,UADnE;AAAA,UAC+E,aAD/E,eAC+E,aAD/E;AAAA,UAC8F,kBAD9F,eAC8F,kBAD9F;AAEZ,aACC,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,QAAA,KAAK,EAAE,WAAW,CAAC;AAApB,OAAL,EAEE,CAAC,kBAAD,IACC,KAAK,sBAAL,CAA4B,aAA5B,EAA2C,OAAO,mCAAlD,EAAuF,WAAW,CAAC,OAAnG,EAA4G,WAAW,CAAC,UAAxH,CAHH,EAKC,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,SAAA;AACT,QAAA,WAAW,EAAE,UADJ;AAET,QAAA,oBAAoB,EAAE,oBAFb;AAGT,QAAA,KAAK,EAAE,CAAC,WAAW,CAAC,SAAb,EAAwB,WAAW,IAAI,WAAW,CAAC,cAAnD,EAAmE,kBAAkB,IAAI,WAAW,CAAC,aAArG,CAHE;AAIT,QAAA,qBAAqB,EAAE,aAJd;AAKT,QAAA,YAAY,EAAE,sBAAC,IAAD;AAAA,iBAAkB,OAAO,CAAC,IAAD,CAAzB;AAAA;AALL,OAAA,EAML,gBANK,CAAV,CALD,EAaE,CAAC,WAAD,IACA,KAAK,sBAAL,CAA4B,OAA5B,EAAqC,OAAO,8BAA5C,EAA4E,WAAW,CAAC,OAAxF,EAAiG,WAAW,CAAC,WAA7G,CAdF,CADD;AAoBA;AAvBF;AAAA;AAAA,WAwBQ,gCAAuB,QAAvB,EAAgC,MAAhC,EAAwC,WAAxC,EAAqD,QAArD,EAA6D;AACnE,aACC,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB;AAAC,QAAA,OAAO,EAAE;AAAA,iBAAM,QAAO,EAAb;AAAA,SAAV;AAA2B,QAAA,KAAK,EAAE;AAAlC,OAAjB,EACC,KAAA,CAAA,aAAA,CAAC,KAAD,EAAM;AAAC,QAAA,MAAM,EAAE,MAAT;AAAiB,QAAA,KAAK,EAAE;AAAxB,OAAN,CADD,CADD;AAKA;AA9BF;;AAAA;AAAA,EAAqC,KAAK,CAAC,aAA3C","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { View, TextInput, TouchableOpacity, Image } from 'react-native';\nimport { SearchStyle } from '../Assets/Styles';\nexport class SearchComponent extends React.PureComponent {\n    render() {\n        const { SearchInputProps, placeholderTextColor, onClose, setText, forceSelect, searchText, onBackRequest, backButtonDisabled } = this.props;\n        return (React.createElement(View, { style: SearchStyle.searchArea },\n            !backButtonDisabled &&\n                this.touchableOpacityButton(onBackRequest, require('../Assets/Images/left-arrow.png'), SearchStyle.leftBtn, SearchStyle.backButton),\n            React.createElement(TextInput, Object.assign({ placeholder: searchText, placeholderTextColor: placeholderTextColor, style: [SearchStyle.textInput, forceSelect && SearchStyle.nonCloseButton, backButtonDisabled && SearchStyle.nonBackButton], underlineColorAndroid: 'transparent', onChangeText: (text) => setText(text) }, SearchInputProps)),\n            !forceSelect &&\n                this.touchableOpacityButton(onClose, require('../Assets/Images/close.png'), SearchStyle.leftBtn, SearchStyle.closeButton)));\n    }\n    touchableOpacityButton(onPress, imgSrc, buttonStyle, imgStyle) {\n        return (React.createElement(TouchableOpacity, { onPress: () => onPress(), style: buttonStyle },\n            React.createElement(Image, { source: imgSrc, style: imgStyle })));\n    }\n}\n//# sourceMappingURL=Search.js.map"]},"metadata":{},"sourceType":"module"}