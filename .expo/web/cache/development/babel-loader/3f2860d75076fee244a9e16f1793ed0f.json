{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\StatsAppNative\\\\MyApp\\\\node_modules\\\\react-native-simple-modal-picker\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ListView } from \"react-native-web/dist/index\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport PropTypes from \"prop-types\";\n\nvar ModalPicker = function (_Component) {\n  _inherits(ModalPicker, _Component);\n\n  var _super = _createSuper(ModalPicker);\n\n  function ModalPicker(props) {\n    var _this;\n\n    _classCallCheck(this, ModalPicker);\n\n    _this = _super.call(this, props);\n    var ds = new ListView.DataSource({\n      rowHasChanged: function rowHasChanged(r1, r2) {\n        return r1 !== r2;\n      }\n    });\n    _this.state = {\n      dataSource: ds.cloneWithRows(_this.props.data),\n      modalVisible: false\n    };\n    YellowBox.ignoreWarnings(['ListView is deprecated']);\n    return _this;\n  }\n\n  _createClass(ModalPicker, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.state.dataSource != nextProps.dataSource) {\n        this.setState({\n          dataSource: this.state.dataSource.cloneWithRows(nextProps.data)\n        });\n      }\n    }\n  }, {\n    key: \"setModalVisible\",\n    value: function setModalVisible(visible) {\n      this.setState({\n        modalVisible: visible\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: {\n          backgroundColor: \"transparent\",\n          flex: 1,\n          position: \"absolute\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }\n      }, React.createElement(Modal, {\n        animationType: \"fade\",\n        transparent: true,\n        visible: this.state.modalVisible,\n        onRequestClose: function onRequestClose() {\n          _this2.setModalVisible(false);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, React.createElement(TouchableHighlight, {\n        style: styles.container,\n        onPress: function onPress() {\n          return _this2.setModalVisible(false);\n        },\n        underlayColor: \"#333333cc\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, React.createElement(ListView, {\n        dataSource: this.state.dataSource,\n        renderRow: function renderRow(rowData, sectionID, rowID, higlightRow) {\n          return React.createElement(TouchableHighlight, {\n            underlayColor: \"transparent\",\n            onPress: function onPress() {\n              _this2.setModalVisible(false);\n\n              _this2.props.onValueChange(rowData[_this2.props.value], rowID);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 21\n            }\n          }, _this2.props.renderRow ? _this2.props.renderRow(rowData, rowID) : React.createElement(Text, {\n            style: styles.itemText,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 25\n            }\n          }, rowData[_this2.props.label]));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return ModalPicker;\n}(Component);\n\nexport { ModalPicker as default };\nModalPicker.propTypes = {\n  data: PropTypes.array.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onValueChange: PropTypes.func,\n  renderRow: PropTypes.func\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: \"#333333cc\",\n    padding: 16\n  },\n  itemText: {\n    backgroundColor: \"#fff\",\n    padding: 16,\n    fontSize: 18,\n    color: \"#222\",\n    borderTopWidth: 1,\n    borderColor: \"#CCC\"\n  }\n});","map":{"version":3,"sources":["D:/StatsAppNative/MyApp/node_modules/react-native-simple-modal-picker/index.js"],"names":["React","Component","ListView","PropTypes","ModalPicker","props","ds","DataSource","rowHasChanged","r1","r2","state","dataSource","cloneWithRows","data","modalVisible","YellowBox","ignoreWarnings","nextProps","setState","visible","backgroundColor","flex","position","setModalVisible","styles","container","rowData","sectionID","rowID","higlightRow","onValueChange","value","renderRow","itemText","label","propTypes","array","isRequired","string","func","StyleSheet","create","justifyContent","padding","fontSize","color","borderTopWidth","borderColor"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Modal,\n  Text,\n  TouchableHighlight,\n  View,\n  StyleSheet,\n  ListView,\n  YellowBox\n} from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nexport default class ModalPicker extends Component {\n  constructor(props) {\n    super(props);\n    const ds = new ListView.DataSource({\n      rowHasChanged: (r1, r2) => r1 !== r2\n    });\n    this.state = {\n      dataSource: ds.cloneWithRows(this.props.data),\n      modalVisible: false\n    };\n    YellowBox.ignoreWarnings(['ListView is deprecated']);\n  }\n\n  componentWillReceiveProps( nextProps ) {\n    if(this.state.dataSource != nextProps.dataSource) {\n      this.setState({\n        dataSource: this.state.dataSource.cloneWithRows( nextProps.data )\n      });\n    }\n  }\n\n  setModalVisible(visible) {\n    this.setState({ modalVisible: visible });\n  }\n\n  render() {\n    return (\n      <View\n        style={{\n          backgroundColor: \"transparent\",\n          flex: 1,\n          position: \"absolute\"\n        }}\n      >\n        <Modal\n          animationType=\"fade\"\n          transparent={true}\n          visible={this.state.modalVisible}\n          onRequestClose={() => {\n            this.setModalVisible(false);\n          }}\n        >\n          <TouchableHighlight\n            style={styles.container}\n            onPress={() => this.setModalVisible(false)}\n            underlayColor={\"#333333cc\"}\n          >\n            <View>\n              <ListView\n                dataSource={this.state.dataSource}\n                renderRow={(rowData, sectionID, rowID, higlightRow) => {\n                  return (\n                    <TouchableHighlight\n                      underlayColor={\"transparent\"}\n                      onPress={() => {\n                        this.setModalVisible(false);\n                        this.props.onValueChange(rowData[this.props.value], rowID);\n                      }}\n                    >\n                      {this.props.renderRow ? (\n                        this.props.renderRow(rowData, rowID)\n                      ) : (\n                        <Text style={styles.itemText}>\n                          {rowData[this.props.label]}\n                        </Text>\n                      )}\n                    </TouchableHighlight>\n                  );\n                }}\n              />\n            </View>\n          </TouchableHighlight>\n        </Modal>\n      </View>\n    );\n  }\n}\n\nModalPicker.propTypes = {\n  data: PropTypes.array.isRequired,\n  value: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onValueChange: PropTypes.func,\n  renderRow: PropTypes.func\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: \"#333333cc\",\n    padding: 16\n  },\n  itemText: {\n    backgroundColor: \"#fff\",\n    padding: 16,\n    fontSize: 18,\n    color: \"#222\",\n    borderTopWidth: 1,\n    borderColor: \"#CCC\"\n  }\n});\n"]},"metadata":{},"sourceType":"module"}