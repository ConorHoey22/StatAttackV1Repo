{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\StatsAppNative\\\\MyApp\\\\node_modules\\\\react-native-togglebox\\\\src\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Icon from \"@expo/vector-icons/MaterialIcons\";\nimport stylePropType from 'react-style-proptype';\nimport styles from \"./styles.js\";\n\nvar ToggleBox = function (_Component) {\n  _inherits(ToggleBox, _Component);\n\n  var _super = _createSuper(ToggleBox);\n\n  function ToggleBox(props) {\n    var _this;\n\n    _classCallCheck(this, ToggleBox);\n\n    _this = _super.call(this, props);\n\n    _this.toggle = function () {\n      var initialValue = _this.state.expanded ? _this.state.maxHeight + _this.state.minHeight : _this.state.minHeight;\n      var finalValue = _this.state.expanded ? _this.state.minHeight : _this.state.minHeight + _this.state.maxHeight;\n\n      _this.setState({\n        expanded: !_this.state.expanded\n      });\n\n      _this.state.animation.setValue(initialValue);\n\n      Animated.spring(_this.state.animation, {\n        toValue: finalValue,\n        bounciness: 0\n      }).start();\n    };\n\n    _this.setMaxHeight = function (event) {\n      if (!_this.state.maxHeight) {\n        _this.setState({\n          maxHeight: event.nativeEvent.layout.height\n        });\n      }\n    };\n\n    _this.setMinHeight = function (event) {\n      if (!_this.state.animation) {\n        _this.setState({\n          animation: _this.state.expanded ? new Animated.Value() : new Animated.Value(parseInt(event.nativeEvent.layout.height))\n        });\n      }\n\n      _this.setState({\n        minHeight: event.nativeEvent.layout.height\n      });\n    };\n\n    _this.icons = {\n      'up': _this.props.arrowUpType,\n      'down': _this.props.arrowDownType\n    };\n    _this.state = {\n      expanded: _this.props.expanded\n    };\n    return _this;\n  }\n\n  _createClass(ToggleBox, [{\n    key: \"render\",\n    value: function render() {\n      var icon = this.icons[this.state.expanded ? 'up' : 'down'];\n      return React.createElement(Animated.View, {\n        style: [styles.box, this.props.style, {\n          height: this.state.animation\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: this.toggle,\n        onLayout: this.setMinHeight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.titleContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        style: styles.label,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      }, this.props.label), this.props.value ? React.createElement(Text, {\n        style: styles.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 33\n        }\n      }, this.props.value) : null, React.createElement(Icon, {\n        name: icon,\n        color: this.props.arrowColor,\n        style: styles.buttonImage,\n        size: this.props.arrowSize,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }))), React.createElement(View, {\n        style: styles.body,\n        onLayout: this.setMaxHeight,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }\n      }, this.props.children));\n    }\n  }]);\n\n  return ToggleBox;\n}(Component);\n\nToggleBox.propTypes = {\n  arrowColor: PropTypes.string,\n  arrowSize: PropTypes.number,\n  arrowDownType: PropTypes.string,\n  arrowUpType: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  expanded: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  style: stylePropType,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nToggleBox.defaultProps = {\n  arrowColor: 'rgb(178, 178, 178)',\n  arrowSize: 30,\n  arrowDownType: 'keyboard-arrow-down',\n  arrowUpType: 'keyboard-arrow-up',\n  expanded: false,\n  style: {},\n  value: null\n};\nexport default ToggleBox;","map":{"version":3,"sources":["D:/StatsAppNative/MyApp/node_modules/react-native-togglebox/src/index.js"],"names":["React","Component","PropTypes","Icon","stylePropType","styles","ToggleBox","props","toggle","initialValue","state","expanded","maxHeight","minHeight","finalValue","setState","animation","setValue","Animated","spring","toValue","bounciness","start","setMaxHeight","event","nativeEvent","layout","height","setMinHeight","Value","parseInt","icons","arrowUpType","arrowDownType","icon","box","style","titleContainer","label","value","arrowColor","buttonImage","arrowSize","body","children","propTypes","string","number","element","isRequired","bool","oneOfType","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { Text, View, Image, TouchableWithoutFeedback, Animated} from 'react-native'\nimport Icon from 'react-native-vector-icons/MaterialIcons'\nimport stylePropType from 'react-style-proptype';\nimport styles from './styles.js'\n\nclass ToggleBox extends Component {\n  constructor(props) {\n    super(props)\n\n    this.icons = {\n      'up': this.props.arrowUpType,\n      'down': this.props.arrowDownType,\n    }\n\n    this.state = {\n      expanded: this.props.expanded,\n    }\n  }\n\n  toggle = () => {\n    let initialValue = this.state.expanded ? this.state.maxHeight + this.state.minHeight : this.state.minHeight\n    let finalValue = this.state.expanded ? this.state.minHeight : this.state.minHeight + this.state.maxHeight\n\n    this.setState({\n      expanded: !this.state.expanded\n    })\n\n    this.state.animation.setValue(initialValue)\n    Animated.spring(\n      this.state.animation,\n      {\n        toValue: finalValue,\n        bounciness: 0,\n      }\n    ).start()\n  }\n\n  setMaxHeight = (event) => {\n    if (!this.state.maxHeight) {\n      this.setState({\n        maxHeight: event.nativeEvent.layout.height\n      })\n    }\n  }\n\n  setMinHeight = (event) => {\n    if (!this.state.animation) {\n      this.setState({animation:\n        this.state.expanded ?\n          new Animated.Value() :\n          new Animated.Value(parseInt(event.nativeEvent.layout.height))\n      })\n    }\n    this.setState({\n      minHeight: event.nativeEvent.layout.height\n    })\n  }\n\n  render() {\n    const icon = this.icons[this.state.expanded ? 'up' : 'down']\n\n    return (\n      <Animated.View style={[styles.box, this.props.style, {height: this.state.animation}]}>\n        <TouchableWithoutFeedback\n          onPress={this.toggle}\n          onLayout={this.setMinHeight}\n        >\n          <View style={styles.titleContainer}>\n            <Text style={styles.label}>{this.props.label}</Text>\n            {this.props.value ? <Text style={styles.value}>{this.props.value}</Text> : null}\n            <Icon\n              name={icon}\n              color={this.props.arrowColor}\n              style={styles.buttonImage}\n              size={this.props.arrowSize}\n            />\n          </View>\n        </TouchableWithoutFeedback>\n        <View style={styles.body} onLayout={this.setMaxHeight}>\n          {this.props.children}\n        </View>\n      </Animated.View>\n    )\n  }\n}\n\nToggleBox.propTypes = {\n  arrowColor: PropTypes.string,\n  arrowSize: PropTypes.number,\n  arrowDownType: PropTypes.string,\n  arrowUpType: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  expanded: PropTypes.bool,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  style: stylePropType,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n}\n\nToggleBox.defaultProps = {\n  arrowColor: 'rgb(178, 178, 178)',\n  arrowSize: 30,\n  arrowDownType: 'keyboard-arrow-down',\n  arrowUpType: 'keyboard-arrow-up',\n  expanded: false,\n  style: {},\n  value: null,\n}\n\nexport default ToggleBox\n"]},"metadata":{},"sourceType":"module"}