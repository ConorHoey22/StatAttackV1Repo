{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { AlphabetStyle } from \"../Assets/Styles\";\nexport var AlphabetComponent = function (_React$PureComponent) {\n  _inherits(AlphabetComponent, _React$PureComponent);\n\n  var _super = _createSuper(AlphabetComponent);\n\n  function AlphabetComponent() {\n    _classCallCheck(this, AlphabetComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AlphabetComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          alphabets = _this$props.alphabets,\n          setAlphabet = _this$props.setAlphabet,\n          selectedAlpha = _this$props.selectedAlpha,\n          showAlphabeticalIndex = _this$props.showAlphabeticalIndex;\n\n      if (showAlphabeticalIndex) {\n        return React.createElement(View, {\n          style: AlphabetStyle.container\n        }, React.createElement(ScrollView, {\n          showsVerticalScrollIndicator: false,\n          keyboardShouldPersistTaps: \"always\"\n        }, alphabets.map(function (a, index) {\n          return React.createElement(TouchableOpacity, {\n            onPress: function onPress() {\n              return setAlphabet(a);\n            },\n            key: index,\n            style: AlphabetStyle.alphabetButton\n          }, React.createElement(Text, {\n            style: [AlphabetStyle.alphabetText, selectedAlpha === a && AlphabetStyle.selected]\n          }, a));\n        })));\n      }\n\n      return null;\n    }\n  }]);\n\n  return AlphabetComponent;\n}(React.PureComponent);\nAlphabetComponent.defaultProps = {\n  alphabets: ['A', 'B', 'C', 'Ç', 'D', 'E', 'F', 'G', 'H', 'I', 'İ', 'J', 'K', 'L', 'M', 'N', 'O', 'Ö', 'P', 'Q', 'R', 'S', 'Ş', 'T', 'U', 'Ü', 'V', 'W', 'X', 'Y', 'Z']\n};","map":{"version":3,"sources":["../../src/Components/Alphabet.tsx"],"names":[],"mappings":";;;;;;;;;;AACA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;;;;;AAIA,SAAS,aAAT;AAGA,WAAa,iBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAOQ,kBAAM;AAAA,wBAC6D,KAAK,KADlE;AAAA,UACJ,SADI,eACJ,SADI;AAAA,UACO,WADP,eACO,WADP;AAAA,UACoB,aADpB,eACoB,aADpB;AAAA,UACmC,qBADnC,eACmC,qBADnC;;AAGZ,UAAI,qBAAJ,EAA2B;AAC1B,eACC,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AAAC,UAAA,KAAK,EAAE,aAAa,CAAC;AAAtB,SAAL,EACC,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW;AACV,UAAA,4BAA4B,EAAE,KADpB;AAEV,UAAA,yBAAyB,EAAC;AAFhB,SAAX,EAIE,SAAS,CAAC,GAAV,CAAc,UAAC,CAAD,EAAY,KAAZ;AAAA,iBACb,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB;AAAC,YAAA,OAAO,EAAE;AAAA,qBAAM,WAAW,CAAC,CAAD,CAAjB;AAAA,aAAV;AAAgC,YAAA,GAAG,EAAE,KAArC;AAChB,YAAA,KAAK,EAAE,aAAa,CAAC;AADL,WAAjB,EAEC,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;AACJ,YAAA,KAAK,EAAE,CAAC,aAAa,CAAC,YAAf,EAA6B,aAAa,KAAK,CAAlB,IAAuB,aAAa,CAAC,QAAlE;AADH,WAAL,EAGE,CAHF,CAFD,CADa;AAAA,SAAd,CAJF,CADD,CADD;AAqBA;;AACD,aAAO,IAAP;AAEA;AAnCF;;AAAA;AAAA,EAAuC,KAAK,CAAC,aAA7C;AAEe,iBAAA,CAAA,YAAA,GAAe;AAE5B,EAAA,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,EAAiF,GAAjF,EAAsF,GAAtF,EAA2F,GAA3F,EAAgG,GAAhG,EAAqG,GAArG,EAA0G,GAA1G,EAA+G,GAA/G,EAAoH,GAApH,EAAyH,GAAzH,EAA8H,GAA9H,EAAmI,GAAnI,EAAwI,GAAxI,EAA6I,GAA7I,EAAkJ,GAAlJ,EAAuJ,GAAvJ;AAFiB,CAAf","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { Text, View, ScrollView, TouchableOpacity } from 'react-native';\nimport { AlphabetStyle } from '../Assets/Styles';\nexport class AlphabetComponent extends React.PureComponent {\n    render() {\n        const { alphabets, setAlphabet, selectedAlpha, showAlphabeticalIndex } = this.props;\n        if (showAlphabeticalIndex) {\n            return (React.createElement(View, { style: AlphabetStyle.container },\n                React.createElement(ScrollView, { showsVerticalScrollIndicator: false, keyboardShouldPersistTaps: \"always\" }, alphabets.map((a, index) => React.createElement(TouchableOpacity, { onPress: () => setAlphabet(a), key: index, style: AlphabetStyle.alphabetButton },\n                    React.createElement(Text, { style: [AlphabetStyle.alphabetText, selectedAlpha === a && AlphabetStyle.selected] }, a))))));\n        }\n        return null;\n    }\n}\nAlphabetComponent.defaultProps = {\n    alphabets: ['A', 'B', 'C', 'Ç', 'D', 'E', 'F', 'G', 'H', 'I', 'İ', 'J', 'K', 'L', 'M', 'N', 'O', 'Ö', 'P', 'Q', 'R', 'S', 'Ş', 'T', 'U', 'Ü', 'V', 'W', 'X', 'Y', 'Z'],\n};\n//# sourceMappingURL=Alphabet.js.map"]},"metadata":{},"sourceType":"module"}